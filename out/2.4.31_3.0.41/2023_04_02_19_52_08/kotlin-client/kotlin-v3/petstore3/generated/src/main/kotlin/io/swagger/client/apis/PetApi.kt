/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApiResponse
import io.swagger.client.models.Category
import io.swagger.client.models.Pet
import io.swagger.client.models.Tag

import io.swagger.client.infrastructure.*

class PetApi(basePath: kotlin.String = "https://raw.githubusercontent.com/api/v3") : ApiClient(basePath) {

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param body Create a new pet in the store 
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    fun addPet(body: Pet): Pet {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pet", headers = localVariableHeaders
        )
        val response = request<Pet>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param id  
     * @param name  
     * @param category  
     * @param photoUrls  
     * @param tags  
     * @param status  
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    fun addPet(id: kotlin.Long, name: kotlin.String, category: Category, photoUrls: kotlin.Array<kotlin.String>, tags: kotlin.Array<Tag>, status: kotlin.String): Pet {
        val localVariableBody: kotlin.Any? = mapOf("id" to "$id", "name" to "$name", "category" to "$category", "photoUrls" to "$photoUrls", "tags" to "$tags", "status" to "$status")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pet", headers = localVariableHeaders
        )
        val response = request<Pet>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     * @return void
     */
    fun deletePet(petId: kotlin.Long, apiKey: kotlin.String? = null): Unit {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("api_key" to apiKey.toString())
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/pet/{petId}".replace("{" + "petId" + "}", "$petId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter (optional, default to available)
     * @return kotlin.Array<Pet>
     */
    @Suppress("UNCHECKED_CAST")
    fun findPetsByStatus(status: kotlin.String? = null): kotlin.Array<Pet> {
        val localVariableQuery: MultiValueMap = mapOf("status" to listOf("$status"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pet/findByStatus", query = localVariableQuery
        )
        val response = request<kotlin.Array<Pet>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Pet>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by (optional)
     * @return kotlin.Array<Pet>
     */
    @Suppress("UNCHECKED_CAST")
    fun findPetsByTags(tags: kotlin.Array<kotlin.String>? = null): kotlin.Array<Pet> {
        val localVariableQuery: MultiValueMap = mapOf("tags" to toMultiValue(tags!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pet/findByTags", query = localVariableQuery
        )
        val response = request<kotlin.Array<Pet>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Pet>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    fun getPetById(petId: kotlin.Long): Pet {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pet/{petId}".replace("{" + "petId" + "}", "$petId")
        )
        val response = request<Pet>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param body Update an existent pet in the store 
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePet(body: Pet): Pet {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/pet", headers = localVariableHeaders
        )
        val response = request<Pet>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param id  
     * @param name  
     * @param category  
     * @param photoUrls  
     * @param tags  
     * @param status  
     * @return Pet
     */
    @Suppress("UNCHECKED_CAST")
    fun updatePet(id: kotlin.Long, name: kotlin.String, category: Category, photoUrls: kotlin.Array<kotlin.String>, tags: kotlin.Array<Tag>, status: kotlin.String): Pet {
        val localVariableBody: kotlin.Any? = mapOf("id" to "$id", "name" to "$name", "category" to "$category", "photoUrls" to "$photoUrls", "tags" to "$tags", "status" to "$status")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/pet", headers = localVariableHeaders
        )
        val response = request<Pet>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name Name of pet that needs to be updated (optional)
     * @param status Status of pet that needs to be updated (optional)
     * @return void
     */
    fun updatePetWithForm(petId: kotlin.Long, name: kotlin.String? = null, status: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "status" to listOf("$status"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pet/{petId}".replace("{" + "petId" + "}", "$petId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param body  (optional)
     * @param additionalMetadata Additional Metadata (optional)
     * @return ApiResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun uploadFile(petId: kotlin.Long, body: Object? = null, additionalMetadata: kotlin.String? = null): ApiResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("additionalMetadata" to listOf("$additionalMetadata"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pet/{petId}/uploadImage".replace("{" + "petId" + "}", "$petId"), query = localVariableQuery
        )
        val response = request<ApiResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApiResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
