/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Order

import io.swagger.client.infrastructure.*

class StoreApi(basePath: kotlin.String = "https://raw.githubusercontent.com/api/v3") : ApiClient(basePath) {

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted 
     * @return void
     */
    fun deleteOrder(orderId: kotlin.Long): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/store/order/{orderId}".replace("{" + "orderId" + "}", "$orderId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     * @return kotlin.collections.Map<kotlin.String, kotlin.Int>
     */
    @Suppress("UNCHECKED_CAST")
    fun getInventory(): kotlin.collections.Map<kotlin.String, kotlin.Int> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/store/inventory"
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.Int>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.Int>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of order that needs to be fetched 
     * @return Order
     */
    @Suppress("UNCHECKED_CAST")
    fun getOrderById(orderId: kotlin.Long): Order {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/store/order/{orderId}".replace("{" + "orderId" + "}", "$orderId")
        )
        val response = request<Order>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Order
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Place an order for a pet
     * Place a new order in the store
     * @param body  (optional)
     * @return Order
     */
    @Suppress("UNCHECKED_CAST")
    fun placeOrder(body: Order? = null): Order {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/store/order", headers = localVariableHeaders
        )
        val response = request<Order>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Order
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Place an order for a pet
     * Place a new order in the store
     * @param id  (optional)
     * @param petId  (optional)
     * @param quantity  (optional)
     * @param shipDate  (optional)
     * @param status  (optional)
     * @param complete  (optional)
     * @return Order
     */
    @Suppress("UNCHECKED_CAST")
    fun placeOrder(id: kotlin.Long? = null, petId: kotlin.Long? = null, quantity: kotlin.Int? = null, shipDate: kotlin.String? = null, status: kotlin.String? = null, complete: kotlin.Boolean? = null): Order {
        val localVariableBody: kotlin.Any? = mapOf("id" to "$id", "petId" to "$petId", "quantity" to "$quantity", "shipDate" to "$shipDate", "status" to "$status", "complete" to "$complete")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/store/order", headers = localVariableHeaders
        )
        val response = request<Order>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Order
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
