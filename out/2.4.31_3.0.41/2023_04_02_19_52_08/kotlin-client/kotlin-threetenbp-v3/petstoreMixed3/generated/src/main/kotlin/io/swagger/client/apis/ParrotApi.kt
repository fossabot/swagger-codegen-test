/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse200
import io.swagger.client.models.InlineResponse2001
import io.swagger.client.models.ParrotBody
import io.swagger.client.models.ParrotBody1

import io.swagger.client.infrastructure.*
import org.threeten.bp.LocalDateTime

class ParrotApi(basePath: kotlin.String = "https://raw.githubusercontent.com/v3") : ApiClient(basePath) {

    /**
     * Add a new parrow to the store
     * 
     * @param body  (optional)
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun addParrot(body: ParrotBody1? = null): InlineResponse2001 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/parrot"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get Parrots
     * 
     * @return kotlin.Array<kotlin.Any>
     */
    @Suppress("UNCHECKED_CAST")
    fun getParrots(): kotlin.Array<kotlin.Any> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/parrot"
        )
        val response = request<kotlin.Array<kotlin.Any>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Any>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * update parrots
     * 
     * @param body  (optional)
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun updateParrots(body: ParrotBody? = null): InlineResponse200 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/parrot"
        )
        val response = request<InlineResponse200>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
