/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Dog from '../model/Dog';

/**
* Dog service.
* @module api/DogApi
* @version 1.0.0
*/
export default class DogApi {

    /**
    * Constructs a new DogApi. 
    * @alias module:api/DogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addDog operation.
     * @callback module:api/DogApi~addDogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new dog to the store
     * @param {module:api/DogApi~addDogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDog() {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_bearer_test'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDog operation.
     * @callback module:api/DogApi~deleteDogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dog
     * @param {Object} opts Optional parameters
     * @param {module:api/DogApi~deleteDogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDog() {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
      };

      let authNames = ['http_bearer_test'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dog/{dogId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDogById operation.
     * @callback module:api/DogApi~getDogByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find dog by ID
     * Returns a single dog
     * @param {module:api/DogApi~getDogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dog}
     */
    getDogById() {
      let postBody = null;

      let pathParams = {
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_bearer_test'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = Dog;

      return this.apiClient.callApi(
        '/dog/{dogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDog operation.
     * @callback module:api/DogApi~updateDogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing dog
     * @param {module:api/DogApi~updateDogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDog() {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_bearer_test'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dog', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDogWithForm operation.
     * @callback module:api/DogApi~updateDogWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dog
     * @param {Object} opts Optional parameters
     * @param {module:api/DogApi~updateDogWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDogWithForm() {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'status': opts['status']
      };

      let authNames = ['http_bearer_test'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/dog/{dogId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
