=begin
#Swagger Petstore

#This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

OpenAPI spec version: 1.0.0
Contact: apiteam@swagger.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class DogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new dog to the store
    # @param body Dog object that needs to be added to the store
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_dog(body, opts = {})
      add_dog_with_http_info(body, opts)
      nil
    end

    # Add a new dog to the store
    # @param body Dog object that needs to be added to the store
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_dog_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DogApi.add_dog ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DogApi.add_dog"
      end
      # resource path
      local_var_path = '/dog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DogApi#add_dog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a dog
    # @param dog_id Dog id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [nil]
    def delete_dog(dog_id, opts = {})
      delete_dog_with_http_info(dog_id, opts)
      nil
    end

    # Deletes a dog
    # @param dog_id Dog id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dog_with_http_info(dog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DogApi.delete_dog ...'
      end
      # verify the required parameter 'dog_id' is set
      if @api_client.config.client_side_validation && dog_id.nil?
        fail ArgumentError, "Missing the required parameter 'dog_id' when calling DogApi.delete_dog"
      end
      # resource path
      local_var_path = '/dog/{dogId}'.sub('{' + 'dogId' + '}', dog_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DogApi#delete_dog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find dog by ID
    # Returns a single dog
    # @param dog_id ID of dog to return
    # @param [Hash] opts the optional parameters
    # @return [Dog]
    def get_dog_by_id(dog_id, opts = {})
      data, _status_code, _headers = get_dog_by_id_with_http_info(dog_id, opts)
      data
    end

    # Find dog by ID
    # Returns a single dog
    # @param dog_id ID of dog to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dog, Integer, Hash)>] Dog data, response status code and response headers
    def get_dog_by_id_with_http_info(dog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DogApi.get_dog_by_id ...'
      end
      # verify the required parameter 'dog_id' is set
      if @api_client.config.client_side_validation && dog_id.nil?
        fail ArgumentError, "Missing the required parameter 'dog_id' when calling DogApi.get_dog_by_id"
      end
      # resource path
      local_var_path = '/dog/{dogId}'.sub('{' + 'dogId' + '}', dog_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Dog' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DogApi#get_dog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing dog
    # @param body Dog object that needs to be added.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dog(body, opts = {})
      update_dog_with_http_info(body, opts)
      nil
    end

    # Update an existing dog
    # @param body Dog object that needs to be added.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_dog_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DogApi.update_dog ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DogApi.update_dog"
      end
      # resource path
      local_var_path = '/dog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DogApi#update_dog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a dog
    # @param dog_id ID of dog that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :status 
    # @return [nil]
    def update_dog_with_form(dog_id, opts = {})
      update_dog_with_form_with_http_info(dog_id, opts)
      nil
    end

    # Updates a dog
    # @param dog_id ID of dog that needs to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :status 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_dog_with_form_with_http_info(dog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DogApi.update_dog_with_form ...'
      end
      # verify the required parameter 'dog_id' is set
      if @api_client.config.client_side_validation && dog_id.nil?
        fail ArgumentError, "Missing the required parameter 'dog_id' when calling DogApi.update_dog_with_form"
      end
      # resource path
      local_var_path = '/dog/{dogId}'.sub('{' + 'dogId' + '}', dog_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['status'] = opts[:'status'] if !opts[:'status'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DogApi#update_dog_with_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
