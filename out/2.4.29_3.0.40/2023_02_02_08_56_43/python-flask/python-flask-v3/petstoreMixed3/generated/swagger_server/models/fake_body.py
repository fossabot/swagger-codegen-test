# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class FakeBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, integer: int=None, int32: int=None, int64: int=None, number: float=None, _float: float=None, double: float=None, string: str=None, pattern_without_delimiter: str=None, byte: bytearray=None, binary: str=None, _date: date=None, date_time: datetime=None, password: str=None, callback: str=None):  # noqa: E501
        """FakeBody - a model defined in Swagger

        :param integer: The integer of this FakeBody.  # noqa: E501
        :type integer: int
        :param int32: The int32 of this FakeBody.  # noqa: E501
        :type int32: int
        :param int64: The int64 of this FakeBody.  # noqa: E501
        :type int64: int
        :param number: The number of this FakeBody.  # noqa: E501
        :type number: float
        :param _float: The _float of this FakeBody.  # noqa: E501
        :type _float: float
        :param double: The double of this FakeBody.  # noqa: E501
        :type double: float
        :param string: The string of this FakeBody.  # noqa: E501
        :type string: str
        :param pattern_without_delimiter: The pattern_without_delimiter of this FakeBody.  # noqa: E501
        :type pattern_without_delimiter: str
        :param byte: The byte of this FakeBody.  # noqa: E501
        :type byte: bytearray
        :param binary: The binary of this FakeBody.  # noqa: E501
        :type binary: str
        :param _date: The _date of this FakeBody.  # noqa: E501
        :type _date: date
        :param date_time: The date_time of this FakeBody.  # noqa: E501
        :type date_time: datetime
        :param password: The password of this FakeBody.  # noqa: E501
        :type password: str
        :param callback: The callback of this FakeBody.  # noqa: E501
        :type callback: str
        """
        self.swagger_types = {
            'integer': int,
            'int32': int,
            'int64': int,
            'number': float,
            '_float': float,
            'double': float,
            'string': str,
            'pattern_without_delimiter': str,
            'byte': bytearray,
            'binary': str,
            '_date': date,
            'date_time': datetime,
            'password': str,
            'callback': str
        }

        self.attribute_map = {
            'integer': 'integer',
            'int32': 'int32',
            'int64': 'int64',
            'number': 'number',
            '_float': 'float',
            'double': 'double',
            'string': 'string',
            'pattern_without_delimiter': 'pattern_without_delimiter',
            'byte': 'byte',
            'binary': 'binary',
            '_date': 'date',
            'date_time': 'dateTime',
            'password': 'password',
            'callback': 'callback'
        }
        self._integer = integer
        self._int32 = int32
        self._int64 = int64
        self._number = number
        self.__float = _float
        self._double = double
        self._string = string
        self._pattern_without_delimiter = pattern_without_delimiter
        self._byte = byte
        self._binary = binary
        self.__date = _date
        self._date_time = date_time
        self._password = password
        self._callback = callback

    @classmethod
    def from_dict(cls, dikt) -> 'FakeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The fake_body of this FakeBody.  # noqa: E501
        :rtype: FakeBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integer(self) -> int:
        """Gets the integer of this FakeBody.

        None  # noqa: E501

        :return: The integer of this FakeBody.
        :rtype: int
        """
        return self._integer

    @integer.setter
    def integer(self, integer: int):
        """Sets the integer of this FakeBody.

        None  # noqa: E501

        :param integer: The integer of this FakeBody.
        :type integer: int
        """

        self._integer = integer

    @property
    def int32(self) -> int:
        """Gets the int32 of this FakeBody.

        None  # noqa: E501

        :return: The int32 of this FakeBody.
        :rtype: int
        """
        return self._int32

    @int32.setter
    def int32(self, int32: int):
        """Sets the int32 of this FakeBody.

        None  # noqa: E501

        :param int32: The int32 of this FakeBody.
        :type int32: int
        """

        self._int32 = int32

    @property
    def int64(self) -> int:
        """Gets the int64 of this FakeBody.

        None  # noqa: E501

        :return: The int64 of this FakeBody.
        :rtype: int
        """
        return self._int64

    @int64.setter
    def int64(self, int64: int):
        """Sets the int64 of this FakeBody.

        None  # noqa: E501

        :param int64: The int64 of this FakeBody.
        :type int64: int
        """

        self._int64 = int64

    @property
    def number(self) -> float:
        """Gets the number of this FakeBody.

        None  # noqa: E501

        :return: The number of this FakeBody.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number: float):
        """Sets the number of this FakeBody.

        None  # noqa: E501

        :param number: The number of this FakeBody.
        :type number: float
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def _float(self) -> float:
        """Gets the _float of this FakeBody.

        None  # noqa: E501

        :return: The _float of this FakeBody.
        :rtype: float
        """
        return self.__float

    @_float.setter
    def _float(self, _float: float):
        """Sets the _float of this FakeBody.

        None  # noqa: E501

        :param _float: The _float of this FakeBody.
        :type _float: float
        """

        self.__float = _float

    @property
    def double(self) -> float:
        """Gets the double of this FakeBody.

        None  # noqa: E501

        :return: The double of this FakeBody.
        :rtype: float
        """
        return self._double

    @double.setter
    def double(self, double: float):
        """Sets the double of this FakeBody.

        None  # noqa: E501

        :param double: The double of this FakeBody.
        :type double: float
        """
        if double is None:
            raise ValueError("Invalid value for `double`, must not be `None`")  # noqa: E501

        self._double = double

    @property
    def string(self) -> str:
        """Gets the string of this FakeBody.

        None  # noqa: E501

        :return: The string of this FakeBody.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string: str):
        """Sets the string of this FakeBody.

        None  # noqa: E501

        :param string: The string of this FakeBody.
        :type string: str
        """

        self._string = string

    @property
    def pattern_without_delimiter(self) -> str:
        """Gets the pattern_without_delimiter of this FakeBody.

        None  # noqa: E501

        :return: The pattern_without_delimiter of this FakeBody.
        :rtype: str
        """
        return self._pattern_without_delimiter

    @pattern_without_delimiter.setter
    def pattern_without_delimiter(self, pattern_without_delimiter: str):
        """Sets the pattern_without_delimiter of this FakeBody.

        None  # noqa: E501

        :param pattern_without_delimiter: The pattern_without_delimiter of this FakeBody.
        :type pattern_without_delimiter: str
        """
        if pattern_without_delimiter is None:
            raise ValueError("Invalid value for `pattern_without_delimiter`, must not be `None`")  # noqa: E501

        self._pattern_without_delimiter = pattern_without_delimiter

    @property
    def byte(self) -> bytearray:
        """Gets the byte of this FakeBody.

        None  # noqa: E501

        :return: The byte of this FakeBody.
        :rtype: bytearray
        """
        return self._byte

    @byte.setter
    def byte(self, byte: bytearray):
        """Sets the byte of this FakeBody.

        None  # noqa: E501

        :param byte: The byte of this FakeBody.
        :type byte: bytearray
        """
        if byte is None:
            raise ValueError("Invalid value for `byte`, must not be `None`")  # noqa: E501

        self._byte = byte

    @property
    def binary(self) -> str:
        """Gets the binary of this FakeBody.

        None  # noqa: E501

        :return: The binary of this FakeBody.
        :rtype: str
        """
        return self._binary

    @binary.setter
    def binary(self, binary: str):
        """Sets the binary of this FakeBody.

        None  # noqa: E501

        :param binary: The binary of this FakeBody.
        :type binary: str
        """

        self._binary = binary

    @property
    def _date(self) -> date:
        """Gets the _date of this FakeBody.

        None  # noqa: E501

        :return: The _date of this FakeBody.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this FakeBody.

        None  # noqa: E501

        :param _date: The _date of this FakeBody.
        :type _date: date
        """

        self.__date = _date

    @property
    def date_time(self) -> datetime:
        """Gets the date_time of this FakeBody.

        None  # noqa: E501

        :return: The date_time of this FakeBody.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: datetime):
        """Sets the date_time of this FakeBody.

        None  # noqa: E501

        :param date_time: The date_time of this FakeBody.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def password(self) -> str:
        """Gets the password of this FakeBody.

        None  # noqa: E501

        :return: The password of this FakeBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this FakeBody.

        None  # noqa: E501

        :param password: The password of this FakeBody.
        :type password: str
        """

        self._password = password

    @property
    def callback(self) -> str:
        """Gets the callback of this FakeBody.

        None  # noqa: E501

        :return: The callback of this FakeBody.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback: str):
        """Sets the callback of this FakeBody.

        None  # noqa: E501

        :param callback: The callback of this FakeBody.
        :type callback: str
        """

        self._callback = callback
