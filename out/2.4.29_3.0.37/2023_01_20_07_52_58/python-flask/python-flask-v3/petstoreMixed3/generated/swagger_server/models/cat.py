# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.animal import Animal  # noqa: F401,E501
from swagger_server import util


class Cat(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_name: str=None, color: str='red', declawed: bool=None):  # noqa: E501
        """Cat - a model defined in Swagger

        :param class_name: The class_name of this Cat.  # noqa: E501
        :type class_name: str
        :param color: The color of this Cat.  # noqa: E501
        :type color: str
        :param declawed: The declawed of this Cat.  # noqa: E501
        :type declawed: bool
        """
        self.swagger_types = {
            'class_name': str,
            'color': str,
            'declawed': bool
        }

        self.attribute_map = {
            'class_name': 'className',
            'color': 'color',
            'declawed': 'declawed'
        }
        self._class_name = class_name
        self._color = color
        self._declawed = declawed

    @classmethod
    def from_dict(cls, dikt) -> 'Cat':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cat of this Cat.  # noqa: E501
        :rtype: Cat
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_name(self) -> str:
        """Gets the class_name of this Cat.


        :return: The class_name of this Cat.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name: str):
        """Sets the class_name of this Cat.


        :param class_name: The class_name of this Cat.
        :type class_name: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def color(self) -> str:
        """Gets the color of this Cat.


        :return: The color of this Cat.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this Cat.


        :param color: The color of this Cat.
        :type color: str
        """

        self._color = color

    @property
    def declawed(self) -> bool:
        """Gets the declawed of this Cat.


        :return: The declawed of this Cat.
        :rtype: bool
        """
        return self._declawed

    @declawed.setter
    def declawed(self, declawed: bool):
        """Sets the declawed of this Cat.


        :param declawed: The declawed of this Cat.
        :type declawed: bool
        """

        self._declawed = declawed
