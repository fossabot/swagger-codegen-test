/**
* Swagger Petstore
* This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Add a new animal to the store
     * 
     * @param body Animal object that needs to be added to the store 
     */
    @Location("/animal") class addAnimal(val body: Animal)

    /**
     * Deletes a animal
     * 
     * @param animalId Animal id to delete 
     * @param apiKey  (optional)
     */
    @Location("/animal/{animalId}") class deleteAnimal(val animalId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * Find animal by ID
     * Returns a single animal
     * @param animalId ID of pet to return 
     */
    @Location("/animal/{animalId}") class getAnimalById(val animalId: kotlin.Long)

    /**
     * Update an existing animal
     * 
     * @param body Animal object that needs to be added. 
     */
    @Location("/animal") class updateAnimal(val body: Animal)

    /**
     * Updates a animal
     * 
     * @param animalId ID of animal that needs to be updated 
     * @param name  (optional)
     * @param status  (optional)
     */
    @Location("/animal/{animalId}") class updateAnimalWithForm(val animalId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * To test special tags
     * To test special tags
     * @param body client model 
     */
    @Location("/another-fake/dummy") class testSpecialTags(val body: Client)

    /**
     * Add a new dog to the store
     * 
     * @param body Dog object that needs to be added to the store 
     */
    @Location("/dog") class addDog(val body: Dog)

    /**
     * Deletes a dog
     * 
     * @param dogId Dog id to delete 
     * @param apiKey  (optional)
     */
    @Location("/dog/{dogId}") class deleteDog(val dogId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * Find dog by ID
     * Returns a single dog
     * @param dogId ID of dog to return 
     */
    @Location("/dog/{dogId}") class getDogById(val dogId: kotlin.Long)

    /**
     * Update an existing dog
     * 
     * @param body Dog object that needs to be added. 
     */
    @Location("/dog") class updateDog(val body: Dog)

    /**
     * Updates a dog
     * 
     * @param dogId ID of dog that needs to be updated 
     * @param name  (optional)
     * @param status  (optional)
     */
    @Location("/dog/{dogId}") class updateDogWithForm(val dogId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * 
     * Test serialization of outer boolean types
     * @param body Input boolean as post body (optional)
     */
    @Location("/fake/outer/boolean") class fakeOuterBooleanSerialize(val body: kotlin.Boolean)

    /**
     * 
     * Test serialization of object with outer number type
     * @param body Input composite as post body (optional)
     */
    @Location("/fake/outer/composite") class fakeOuterCompositeSerialize(val body: OuterComposite)

    /**
     * 
     * Test serialization of outer number types
     * @param body Input number as post body (optional)
     */
    @Location("/fake/outer/number") class fakeOuterNumberSerialize(val body: java.math.BigDecimal)

    /**
     * 
     * Test serialization of outer string types
     * @param body Input string as post body (optional)
     */
    @Location("/fake/outer/string") class fakeOuterStringSerialize(val body: kotlin.String)

    /**
     * To test \&quot;client\&quot; model
     * To test &quot;client&quot; model
     * @param body client model 
     */
    @Location("/fake") class testClientModel(val body: Client)

    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * Fake endpoint for testing various parameters
假端點
偽のエンドポイント
가짜 엔드 포인트

     * @param body  
     */
    @Location("/fake") class testEndpointParameters(val body: FakeBody)

    /**
     * To test enum parameters
     * To test enum parameters
     * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
     * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
     * @param enumQueryStringArray Query parameter enum test (string array) (optional)
     * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
     * @param enumQueryInteger Query parameter enum test (double) (optional)
     */
    @Location("/fake") class testEnumParameters(val enumHeaderStringArray: kotlin.Array<kotlin.String>, val enumHeaderString: kotlin.String, val enumQueryStringArray: kotlin.Array<kotlin.String>, val enumQueryString: kotlin.String, val enumQueryInteger: kotlin.Int)

    /**
     * To test enum parameters
     * To test enum parameters
     * @param body  (optional)
     */
    @Location("/fake/enum/form") class testEnumRequestBody(val body: EnumFormBody)

    /**
     * test inline additionalProperties
     * 
     * @param body request body 
     */
    @Location("/fake/inline-additionalProperties") class testInlineAdditionalProperties(val body: kotlin.collections.Map<kotlin.String, kotlin.String>)

    /**
     * test json serialization of form data
     * 
     * @param body  
     */
    @Location("/fake/jsonFormData") class testJsonFormData(val body: FakeJsonFormDataBody)

    /**
     * To test class name in snake case
     * 
     * @param body client model 
     */
    @Location("/fake_classname_test") class testClassname(val body: Client)

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @Location("/pet") class addPet(val body: Pet)

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     */
    @Location("/pet/{petId}") class deletePet(val petId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * 
     * 
     * @param body  (optional)
     */
    @Location("/pet/category") class doCategoryStuff(val body: SubCategory)

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter 
     */
    @Location("/pet/findByStatus") class findPetsByStatus(val status: kotlin.Array<kotlin.String>)

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by 
     */
    @Location("/pet/findByTags") class findPetsByTags(val tags: kotlin.Array<kotlin.String>)

    /**
     * 
     * 
     */
    @Location("/allPets") class getAllPets()

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     */
    @Location("/pet/{petId}") class getPetById(val petId: kotlin.Long)

    /**
     * 
     * 
     */
    @Location("/randomPet") class getRandomPet()

    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @Location("/pet") class updatePet(val body: Pet)

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name  (optional)
     * @param status  (optional)
     */
    @Location("/pet/{petId}") class updatePetWithForm(val petId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param additionalMetadata  (optional)
     * @param file  (optional)
     */
    @Location("/pet/{petId}/uploadImage") class uploadFile(val petId: kotlin.Long, val additionalMetadata: kotlin.String, val file: kotlin.Array<kotlin.Byte>)

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted 
     */
    @Location("/store/order/{orderId}") class deleteOrder(val orderId: kotlin.String)

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    @Location("/store/inventory") class getInventory()

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched 
     */
    @Location("/store/order/{orderId}") class getOrderById(val orderId: kotlin.Long)

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet 
     */
    @Location("/store/order") class placeOrder(val body: Order)

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object 
     */
    @Location("/user") class createUser(val body: User)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @Location("/user/createWithArray") class createUsersWithArrayInput(val body: kotlin.Array<User>)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @Location("/user/createWithList") class createUsersWithListInput(val body: kotlin.Array<User>)

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     */
    @Location("/user/{username}") class deleteUser(val username: kotlin.String)

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  
     */
    @Location("/user/{username}") class getUserByName(val username: kotlin.String)

    /**
     * Logs user into the system
     * 
     * @param username The user name for login 
     * @param password The password for login in clear text 
     */
    @Location("/user/login") class loginUser(val username: kotlin.String, val password: kotlin.String)

    /**
     * Logs out current logged in user session
     * 
     */
    @Location("/user/logout") class logoutUser()

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param body Updated user object 
     * @param username name that need to be deleted 
     */
    @Location("/user/{username}") class updateUser(val body: User, val username: kotlin.String)

}
