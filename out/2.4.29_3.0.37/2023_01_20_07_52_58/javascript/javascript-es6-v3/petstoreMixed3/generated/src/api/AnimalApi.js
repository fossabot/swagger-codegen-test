/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.37
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Animal} from '../model/Animal';

/**
* Animal service.
* @module api/AnimalApi
* @version 1.0.0
*/
export class AnimalApi {

    /**
    * Constructs a new AnimalApi. 
    * @alias module:api/AnimalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addAnimal operation.
     * @callback moduleapi/AnimalApi~addAnimalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new animal to the store
     * @param {module:model/Animal} body Animal object that needs to be added to the store
     * @param {module:api/AnimalApi~addAnimalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addAnimal(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAnimal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key_query'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/animal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAnimal operation.
     * @callback moduleapi/AnimalApi~deleteAnimalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a animal
     * @param {Number} animalId Animal id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/AnimalApi~deleteAnimalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAnimal(animalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'animalId' is set
      if (animalId === undefined || animalId === null) {
        throw new Error("Missing the required parameter 'animalId' when calling deleteAnimal");
      }

      let pathParams = {
        'animalId': animalId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key_query'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/animal/{animalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAnimalById operation.
     * @callback moduleapi/AnimalApi~getAnimalByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Animal{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find animal by ID
     * Returns a single animal
     * @param {Number} animalId ID of pet to return
     * @param {module:api/AnimalApi~getAnimalByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAnimalById(animalId, callback) {
      
      let postBody = null;
      // verify the required parameter 'animalId' is set
      if (animalId === undefined || animalId === null) {
        throw new Error("Missing the required parameter 'animalId' when calling getAnimalById");
      }

      let pathParams = {
        'animalId': animalId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key_query'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = Animal;

      return this.apiClient.callApi(
        '/animal/{animalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAnimal operation.
     * @callback moduleapi/AnimalApi~updateAnimalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing animal
     * @param {module:model/Animal} body Animal object that needs to be added.
     * @param {module:api/AnimalApi~updateAnimalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAnimal(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAnimal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['api_key_query'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/animal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAnimalWithForm operation.
     * @callback moduleapi/AnimalApi~updateAnimalWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a animal
     * @param {Number} animalId ID of animal that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.status 
     * @param {module:api/AnimalApi~updateAnimalWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAnimalWithForm(animalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'animalId' is set
      if (animalId === undefined || animalId === null) {
        throw new Error("Missing the required parameter 'animalId' when calling updateAnimalWithForm");
      }

      let pathParams = {
        'animalId': animalId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'name': opts['name'],'status': opts['status']
      };

      let authNames = ['api_key_query'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/animal/{animalId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}