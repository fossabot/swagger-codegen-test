/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.ApiInvoker;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import java.math.BigDecimal;
import io.swagger.client.model.Client;
import java.util.Date;
import io.swagger.client.model.OuterBoolean;
import io.swagger.client.model.OuterComposite;
import io.swagger.client.model.OuterNumber;
import io.swagger.client.model.OuterString;
import io.swagger.client.model.User;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class FakeApi {
  String basePath = "http://petstore.swagger.io:80/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * 
   * Test serialization of outer boolean types
   * @param body Input boolean as post body
   * @return OuterBoolean
   */
  public OuterBoolean  fakeOuterBooleanSerialize (OuterBoolean body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/fake/outer/boolean".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (OuterBoolean) ApiInvoker.deserialize(localVarResponse, "", OuterBoolean.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * 
   * Test serialization of object with outer number type
   * @param body Input composite as post body
   * @return OuterComposite
   */
  public OuterComposite  fakeOuterCompositeSerialize (OuterComposite body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/fake/outer/composite".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (OuterComposite) ApiInvoker.deserialize(localVarResponse, "", OuterComposite.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * 
   * Test serialization of outer number types
   * @param body Input number as post body
   * @return OuterNumber
   */
  public OuterNumber  fakeOuterNumberSerialize (OuterNumber body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/fake/outer/number".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (OuterNumber) ApiInvoker.deserialize(localVarResponse, "", OuterNumber.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * 
   * Test serialization of outer string types
   * @param body Input string as post body
   * @return OuterString
   */
  public OuterString  fakeOuterStringSerialize (OuterString body) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/fake/outer/string".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (OuterString) ApiInvoker.deserialize(localVarResponse, "", OuterString.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * 
   * 
   * @param body 
   * @param query 
   * @return void
   */
  public void  testBodyWithQueryParams (User body, String query) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, "Missing the required parameter 'body' when calling testBodyWithQueryParams");
    }
    // verify the required parameter 'query' is set
    if (query == null) {
       throw new ApiException(400, "Missing the required parameter 'query' when calling testBodyWithQueryParams");
    }

    // create path and map variables
    String localVarPath = "/fake/body-with-query-params".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));


    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * To test \&quot;client\&quot; model
   * To test \&quot;client\&quot; model
   * @param body client model
   * @return Client
   */
  public Client  testClientModel (Client body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, "Missing the required parameter 'body' when calling testClientModel");
    }

    // create path and map variables
    String localVarPath = "/fake".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Client) ApiInvoker.deserialize(localVarResponse, "", Client.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * @param number None
   * @param _double None
   * @param patternWithoutDelimiter None
   * @param _byte None
   * @param integer None
   * @param int32 None
   * @param int64 None
   * @param _float None
   * @param string None
   * @param binary None
   * @param date None
   * @param dateTime None
   * @param password None
   * @param callback None
   * @return void
   */
  public void  testEndpointParameters (BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte, Integer integer, Integer int32, Long int64, Float _float, String string, byte[] binary, Date date, Date dateTime, String password, String callback) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'number' is set
    if (number == null) {
       throw new ApiException(400, "Missing the required parameter 'number' when calling testEndpointParameters");
    }
    // verify the required parameter '_double' is set
    if (_double == null) {
       throw new ApiException(400, "Missing the required parameter '_double' when calling testEndpointParameters");
    }
    // verify the required parameter 'patternWithoutDelimiter' is set
    if (patternWithoutDelimiter == null) {
       throw new ApiException(400, "Missing the required parameter 'patternWithoutDelimiter' when calling testEndpointParameters");
    }
    // verify the required parameter '_byte' is set
    if (_byte == null) {
       throw new ApiException(400, "Missing the required parameter '_byte' when calling testEndpointParameters");
    }

    // create path and map variables
    String localVarPath = "/fake".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/xml; charset=utf-8","application/json; charset=utf-8"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (integer != null) {
        localVarBuilder.addTextBody("integer", ApiInvoker.parameterToString(integer), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (int32 != null) {
        localVarBuilder.addTextBody("int32", ApiInvoker.parameterToString(int32), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (int64 != null) {
        localVarBuilder.addTextBody("int64", ApiInvoker.parameterToString(int64), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (number != null) {
        localVarBuilder.addTextBody("number", ApiInvoker.parameterToString(number), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (_float != null) {
        localVarBuilder.addTextBody("float", ApiInvoker.parameterToString(_float), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (_double != null) {
        localVarBuilder.addTextBody("double", ApiInvoker.parameterToString(_double), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (string != null) {
        localVarBuilder.addTextBody("string", ApiInvoker.parameterToString(string), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (patternWithoutDelimiter != null) {
        localVarBuilder.addTextBody("pattern_without_delimiter", ApiInvoker.parameterToString(patternWithoutDelimiter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (_byte != null) {
        localVarBuilder.addTextBody("byte", ApiInvoker.parameterToString(_byte), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (binary != null) {
        localVarBuilder.addTextBody("binary", ApiInvoker.parameterToString(binary), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (date != null) {
        localVarBuilder.addTextBody("date", ApiInvoker.parameterToString(date), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateTime != null) {
        localVarBuilder.addTextBody("dateTime", ApiInvoker.parameterToString(dateTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callback != null) {
        localVarBuilder.addTextBody("callback", ApiInvoker.parameterToString(callback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("integer", ApiInvoker.parameterToString(integer));
localVarFormParams.put("int32", ApiInvoker.parameterToString(int32));
localVarFormParams.put("int64", ApiInvoker.parameterToString(int64));
localVarFormParams.put("number", ApiInvoker.parameterToString(number));
localVarFormParams.put("float", ApiInvoker.parameterToString(_float));
localVarFormParams.put("double", ApiInvoker.parameterToString(_double));
localVarFormParams.put("string", ApiInvoker.parameterToString(string));
localVarFormParams.put("pattern_without_delimiter", ApiInvoker.parameterToString(patternWithoutDelimiter));
localVarFormParams.put("byte", ApiInvoker.parameterToString(_byte));
localVarFormParams.put("binary", ApiInvoker.parameterToString(binary));
localVarFormParams.put("date", ApiInvoker.parameterToString(date));
localVarFormParams.put("dateTime", ApiInvoker.parameterToString(dateTime));
localVarFormParams.put("password", ApiInvoker.parameterToString(password));
localVarFormParams.put("callback", ApiInvoker.parameterToString(callback));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * To test enum parameters
   * To test enum parameters
   * @param enumFormStringArray Form parameter enum test (string array)
   * @param enumFormString Form parameter enum test (string)
   * @param enumHeaderStringArray Header parameter enum test (string array)
   * @param enumHeaderString Header parameter enum test (string)
   * @param enumQueryStringArray Query parameter enum test (string array)
   * @param enumQueryString Query parameter enum test (string)
   * @param enumQueryInteger Query parameter enum test (double)
   * @param enumQueryDouble Query parameter enum test (double)
   * @return void
   */
  public void  testEnumParameters (List<String> enumFormStringArray, String enumFormString, List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/fake".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();

    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("csv", "enum_query_string_array", enumQueryStringArray));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "enum_query_string", enumQueryString));
    localVarQueryParams.addAll(ApiInvoker.parameterToPairs("", "enum_query_integer", enumQueryInteger));

    localVarHeaderParams.put("enum_header_string_array", ApiInvoker.parameterToString(enumHeaderStringArray));
    localVarHeaderParams.put("enum_header_string", ApiInvoker.parameterToString(enumHeaderString));

    String[] localVarContentTypes = {
      "*/*"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (enumFormStringArray != null) {
        localVarBuilder.addTextBody("enum_form_string_array", ApiInvoker.parameterToString(enumFormStringArray), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (enumFormString != null) {
        localVarBuilder.addTextBody("enum_form_string", ApiInvoker.parameterToString(enumFormString), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (enumQueryDouble != null) {
        localVarBuilder.addTextBody("enum_query_double", ApiInvoker.parameterToString(enumQueryDouble), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("enum_form_string_array", ApiInvoker.parameterToString(enumFormStringArray));
localVarFormParams.put("enum_form_string", ApiInvoker.parameterToString(enumFormString));
localVarFormParams.put("enum_query_double", ApiInvoker.parameterToString(enumQueryDouble));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * test inline additionalProperties
   * 
   * @param param request body
   * @return void
   */
  public void  testInlineAdditionalProperties (Object param) throws ApiException {
    Object localVarPostBody = param;
    // verify the required parameter 'param' is set
    if (param == null) {
       throw new ApiException(400, "Missing the required parameter 'param' when calling testInlineAdditionalProperties");
    }

    // create path and map variables
    String localVarPath = "/fake/inline-additionalProperties".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * test json serialization of form data
   * 
   * @param param field1
   * @param param2 field2
   * @return void
   */
  public void  testJsonFormData (String param, String param2) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'param' is set
    if (param == null) {
       throw new ApiException(400, "Missing the required parameter 'param' when calling testJsonFormData");
    }
    // verify the required parameter 'param2' is set
    if (param2 == null) {
       throw new ApiException(400, "Missing the required parameter 'param2' when calling testJsonFormData");
    }

    // create path and map variables
    String localVarPath = "/fake/jsonFormData".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();



    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (param != null) {
        localVarBuilder.addTextBody("param", ApiInvoker.parameterToString(param), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (param2 != null) {
        localVarBuilder.addTextBody("param2", ApiInvoker.parameterToString(param2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
      localVarFormParams.put("param", ApiInvoker.parameterToString(param));
localVarFormParams.put("param2", ApiInvoker.parameterToString(param2));
    }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
