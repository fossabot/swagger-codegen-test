# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.category import Category  # noqa: F401,E501
from swagger_server.models.all_of_pup_pets_items import AllOfPupPetsItems  # noqa: F401,E501
from swagger_server import util


class Pup(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, category2: Category=None, pets: List[AllOfPupPetsItems]=None):  # noqa: E501
        """Pup - a model defined in Swagger

        :param id: The id of this Pup.  # noqa: E501
        :type id: int
        :param category2: The category2 of this Pup.  # noqa: E501
        :type category2: Category
        :param pets: The pets of this Pup.  # noqa: E501
        :type pets: List[AllOfPupPetsItems]
        """
        self.swagger_types = {
            'id': int,
            'category2': Category,
            'pets': List[AllOfPupPetsItems]
        }

        self.attribute_map = {
            'id': 'id',
            'category2': 'category2',
            'pets': 'pets'
        }
        self._id = id
        self._category2 = category2
        self._pets = pets

    @classmethod
    def from_dict(cls, dikt) -> 'Pup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pup of this Pup.  # noqa: E501
        :rtype: Pup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Pup.


        :return: The id of this Pup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Pup.


        :param id: The id of this Pup.
        :type id: int
        """

        self._id = id

    @property
    def category2(self) -> Category:
        """Gets the category2 of this Pup.


        :return: The category2 of this Pup.
        :rtype: Category
        """
        return self._category2

    @category2.setter
    def category2(self, category2: Category):
        """Sets the category2 of this Pup.


        :param category2: The category2 of this Pup.
        :type category2: Category
        """

        self._category2 = category2

    @property
    def pets(self) -> List[AllOfPupPetsItems]:
        """Gets the pets of this Pup.


        :return: The pets of this Pup.
        :rtype: List[AllOfPupPetsItems]
        """
        return self._pets

    @pets.setter
    def pets(self, pets: List[AllOfPupPetsItems]):
        """Sets the pets of this Pup.


        :param pets: The pets of this Pup.
        :type pets: List[AllOfPupPetsItems]
        """

        self._pets = pets
