/**
* Swagger Petstore
* This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * 
     * 
     */
    @Location("/test") class testMethod()

    /**
     * Add a new parrow to the store
     * 
     * @param body  (optional)
     */
    @Location("/parrot") class addParrot(val body: ParrotBody1)

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @Location("/pet") class addPet(val body: Pet)

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     */
    @Location("/pet/{petId}") class deletePet(val petId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * 
     * 
     * @param body  (optional)
     */
    @Location("/pet/category") class doCategoryStuff(val body: SubCategory)

    /**
     * Find pet by ID
     * schedule pet feeding
     * @param body Pet object that needs to be added to the store 
     * @param token status 
     * @param petType type of food 
     * @param status status 
     * @param petId ID of pet to return 
     * @param sessionId session id 
     */
    @Location("/pet/feed/{petId}") class feedPet(val body: Pet, val token: kotlin.String, val petType: kotlin.String, val status: kotlin.String, val petId: kotlin.Long, val sessionId: kotlin.String)

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter 
     */
    @Location("/pet/findByStatus") class findPetsByStatus(val status: kotlin.Array<kotlin.String>)

    /**
     * Finds Pets by tags
     * Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by 
     */
    @Location("/pet/findByTags") class findPetsByTags(val tags: kotlin.Array<kotlin.String>)

    /**
     * get Parrots
     * 
     */
    @Location("/parrot") class getParrots()

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     */
    @Location("/pet/{petId}") class getPetById(val petId: kotlin.Long)

    /**
     * update parrots
     * 
     * @param body  (optional)
     */
    @Location("/parrot") class updateParrots(val body: ParrotBody)

    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @Location("/pet") class updatePet(val body: Pet)

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name  (optional)
     * @param status  (optional)
     */
    @Location("/pet/{petId}") class updatePetWithForm(val petId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param body  (optional)
     */
    @Location("/pet/{petId}/uploadImage") class uploadFile(val petId: kotlin.Long, val body: Object)

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
     * @param orderId ID of the order that needs to be deleted 
     */
    @Location("/store/order/{orderId}") class deleteOrder(val orderId: kotlin.Long)

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    @Location("/store/inventory") class getInventory()

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10.\ \ Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched 
     */
    @Location("/store/order/{orderId}") class getOrderById(val orderId: kotlin.Long)

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet 
     */
    @Location("/store/order") class placeOrder(val body: Order)

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object 
     */
    @Location("/user") class createUser(val body: User)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @Location("/user/createWithArray") class createUsersWithArrayInput(val body: kotlin.Array<User>)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @Location("/user/createWithList") class createUsersWithListInput(val body: kotlin.Array<User>)

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     */
    @Location("/user/{username}") class deleteUser(val username: kotlin.String)

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     */
    @Location("/user/{username}") class getUserByName(val username: kotlin.String)

    /**
     * Logs user into the system
     * 
     * @param username The user name for login 
     * @param password The password for login in clear text 
     */
    @Location("/user/login") class loginUser(val username: kotlin.String, val password: kotlin.String)

    /**
     * Logs out current logged in user session
     * 
     */
    @Location("/user/logout") class logoutUser()

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param body Updated user object 
     * @param username name that need to be updated 
     */
    @Location("/user/{username}") class userUsernamePut(val body: User, val username: kotlin.String)

}
