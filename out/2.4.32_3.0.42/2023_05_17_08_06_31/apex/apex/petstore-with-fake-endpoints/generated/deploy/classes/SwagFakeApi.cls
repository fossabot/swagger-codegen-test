/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: " \
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagFakeApi {
    SwagClient client;

    public SwagFakeApi(SwagClient client) {
        this.client = client;
    }

    public SwagFakeApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * 
     * Test serialization of outer boolean types
     * @param body Input boolean as post body (optional)
     * @return Boolean
     * @throws Swagger.ApiException if fails to make API call
     */
    public Boolean fakeOuterBooleanSerialize(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Boolean) client.invoke(
            'POST', '/fake/outer/boolean',
            (Boolean) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            Boolean.class
        );
    }
    /**
     * 
     * Test serialization of object with outer number type
     * @param body Input composite as post body (optional)
     * @return SwagOuterComposite
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagOuterComposite fakeOuterCompositeSerialize(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagOuterComposite) client.invoke(
            'POST', '/fake/outer/composite',
            (SwagOuterComposite) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagOuterComposite.class
        );
    }
    /**
     * 
     * Test serialization of outer number types
     * @param body Input number as post body (optional)
     * @return Double
     * @throws Swagger.ApiException if fails to make API call
     */
    public Double fakeOuterNumberSerialize(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Double) client.invoke(
            'POST', '/fake/outer/number',
            (Double) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            Double.class
        );
    }
    /**
     * 
     * Test serialization of outer string types
     * @param body Input string as post body (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String fakeOuterStringSerialize(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/fake/outer/string',
            (String) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * 
     * @param body  (required)
     * @param query  (required)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void testBodyWithQueryParams(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        client.assertNotNull(params.get('query'), 'query');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('query', (String) params.get('query')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'PUT', '/fake/body-with-query-params',
            (SwagUser) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * To test &quot;client&quot; model
     * To test &quot;client&quot; model
     * @param body client model (required)
     * @return SwagClient
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagClient testClientModel(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagClient) client.invoke(
            'PATCH', '/fake',
            (SwagClient) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagClient.class
        );
    }
    /**
     * Fake endpoint for testing various parameters\n假端點\n偽のエンドポイント\n가짜 엔드 포인트\n
     * Fake endpoint for testing various parameters\n假端點\n偽のエンドポイント\n가짜 엔드 포인트\n
     * @param r_number None (required)
     * @param double None (required)
     * @param patternWithoutDelimiter None (required)
     * @param r_byte None (required)
     * @param integer None (optional)
     * @param int32 None (optional)
     * @param int64 None (optional)
     * @param r_float None (optional)
     * @param string None (optional)
     * @param binary None (optional)
     * @param r_date None (optional)
     * @param dateTime None (optional)
     * @param password None (optional)
     * @param paramCallback None (optional)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void testEndpointParameters(Map<String, Object> params) {
        client.assertNotNull(params.get('r_number'), 'r_number');
        client.assertNotNull(params.get('double'), 'double');
        client.assertNotNull(params.get('patternWithoutDelimiter'), 'patternWithoutDelimiter');
        client.assertNotNull(params.get('r_byte'), 'r_byte');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('integer', (Integer) params.get('integer')));
        form.addAll(client.makeParam('int32', (Integer) params.get('int32')));
        form.addAll(client.makeParam('int64', (Long) params.get('int64')));
        form.addAll(client.makeParam('number', (Double) params.get('r_number')));
        form.addAll(client.makeParam('float', (Double) params.get('r_float')));
        form.addAll(client.makeParam('double', (Double) params.get('double')));
        form.addAll(client.makeParam('string', (String) params.get('string')));
        form.addAll(client.makeParam('pattern_without_delimiter', (String) params.get('patternWithoutDelimiter')));
        form.addAll(client.makeParam('byte', (Blob) params.get('r_byte')));
        form.addAll(client.makeParam('binary', (String) params.get('binary')));
        form.addAll(client.makeParam('date', (Date) params.get('r_date')));
        form.addAll(client.makeParam('dateTime', (Datetime) params.get('dateTime')));
        form.addAll(client.makeParam('password', (String) params.get('password')));
        form.addAll(client.makeParam('callback', (String) params.get('paramCallback')));

        client.invoke(
            'POST', '/fake', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'http_basic_test' },
            null
        );
    }
    /**
     * To test enum parameters
     * To test enum parameters
     * @param enumFormStringArray Form parameter enum test (string array) (optional)
     * @param enumFormString Form parameter enum test (string) (optional, default to -efg)
     * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
     * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
     * @param enumQueryStringArray Query parameter enum test (string array) (optional)
     * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
     * @param enumQueryInteger Query parameter enum test (double) (optional)
     * @param enumQueryDouble Query parameter enum test (double) (optional)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void testEnumParameters(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('enum_query_string_array', (List<String>) params.get('enumQueryStringArray'), 'csv'));
        query.addAll(client.makeParam('enum_query_string', (String) params.get('enumQueryString')));
        query.addAll(client.makeParam('enum_query_integer', (Integer) params.get('enumQueryInteger')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('enum_form_string_array', (List<String>) params.get('enumFormStringArray'), 'csv'));
        form.addAll(client.makeParam('enum_form_string', (String) params.get('enumFormString')));
        form.addAll(client.makeParam('enum_query_double', (Double) params.get('enumQueryDouble')));

        client.invoke(
            'GET', '/fake', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'enum_header_string_array' => (List<String>) params.get('enumHeaderStringArray'),
                'enum_header_string' => (String) params.get('enumHeaderString')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String>(),
            null
        );
    }
    /**
     * test inline additionalProperties
     * 
     * @param param request body (required)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void testInlineAdditionalProperties(Map<String, Object> params) {
        client.assertNotNull(params.get('param'), 'param');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/fake/inline-additionalProperties',
            (Object) params.get('param'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * test json serialization of form data
     * 
     * @param param field1 (required)
     * @param param2 field2 (required)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void testJsonFormData(Map<String, Object> params) {
        client.assertNotNull(params.get('param'), 'param');
        client.assertNotNull(params.get('param2'), 'param2');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('param', (String) params.get('param')));
        form.addAll(client.makeParam('param2', (String) params.get('param2')));

        client.invoke(
            'GET', '/fake/jsonFormData', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String>(),
            null
        );
    }
}
