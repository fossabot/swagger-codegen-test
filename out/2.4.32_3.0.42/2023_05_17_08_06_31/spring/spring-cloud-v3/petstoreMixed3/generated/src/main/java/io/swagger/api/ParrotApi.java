/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.ParrotBody;
import io.swagger.model.ParrotBody1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-17T08:21:19.174Z[Etc/UTC]")
@Validated
@Api(value = "Parrot", description = "the Parrot API")
public interface ParrotApi {

    @ApiOperation(value = "Add a new parrow to the store", nickname = "addParrot", notes = "", response = InlineResponse2001.class, authorizations = {
        @Authorization(value = "jwt")    }, tags={ "parrot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2001.class) })
    @RequestMapping(value = "/parrot",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    com.netflix.hystrix.HystrixCommand<ResponseEntity<InlineResponse2001>> addParrot(@ApiParam(value = "" ) @Valid @RequestBody ParrotBody1 body);


    @ApiOperation(value = "get Parrots", nickname = "getParrots", notes = "", response = Object.class, responseContainer = "List", authorizations = {
        @Authorization(value = "jwt")    }, tags={ "parrot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class, responseContainer = "List") })
    @RequestMapping(value = "/parrot",
        produces = "application/json", 
        method = RequestMethod.GET)
    com.netflix.hystrix.HystrixCommand<ResponseEntity<List<Object>>> getParrots();


    @ApiOperation(value = "update parrots", nickname = "updateParrots", notes = "", response = InlineResponse200.class, authorizations = {
        @Authorization(value = "jwt")    }, tags={ "parrot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse200.class) })
    @RequestMapping(value = "/parrot",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    com.netflix.hystrix.HystrixCommand<ResponseEntity<InlineResponse200>> updateParrots(@ApiParam(value = "" ) @Valid @RequestBody ParrotBody body);

}

