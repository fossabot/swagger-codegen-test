/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.User

import io.swagger.client.infrastructure.*
import org.threeten.bp.LocalDateTime

class UserApi(basePath: kotlin.String = "https://raw.githubusercontent.com/api/v3") : ApiClient(basePath) {

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object (optional)
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun createUser(body: User? = null): User {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "application/json, application/xml"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user", headers = localVariableHeaders
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create user
     * This can only be done by the logged in user.
     * @param id  (optional)
     * @param username  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param email  (optional)
     * @param password  (optional)
     * @param phone  (optional)
     * @param userStatus  (optional)
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun createUser(id: kotlin.Long? = null, username: kotlin.String? = null, firstName: kotlin.String? = null, lastName: kotlin.String? = null, email: kotlin.String? = null, password: kotlin.String? = null, phone: kotlin.String? = null, userStatus: kotlin.Int? = null): User {
        val localVariableBody: kotlin.Any? = mapOf("id" to "$id", "username" to "$username", "firstName" to "$firstName", "lastName" to "$lastName", "email" to "$email", "password" to "$password", "phone" to "$phone", "userStatus" to "$userStatus")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "application/json, application/xml"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user", headers = localVariableHeaders
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates list of users with given input array
     * Creates list of users with given input array
     * @param body  (optional)
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun createUsersWithListInput(body: kotlin.Array<User>? = null): User {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/createWithList"
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     * @return void
     */
    fun deleteUser(username: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/user/{username}".replace("{" + "username" + "}", "$username")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserByName(username: kotlin.String): User {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/{username}".replace("{" + "username" + "}", "$username")
        )
        val response = request<User>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Logs user into the system
     * 
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun loginUser(username: kotlin.String? = null, password: kotlin.String? = null): kotlin.String {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (username != null) {
                put("username", listOf(username.toString()))
            }
            if (password != null) {
                put("password", listOf(password.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/login", query = localVariableQuery
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Logs out current logged in user session
     * 
     * @return void
     */
    fun logoutUser(): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/logout"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted 
     * @param body Update an existent user in the store (optional)
     * @return void
     */
    fun updateUser(username: kotlin.String, body: User? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/user/{username}".replace("{" + "username" + "}", "$username"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted 
     * @param id  (optional)
     * @param username2  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param email  (optional)
     * @param password  (optional)
     * @param phone  (optional)
     * @param userStatus  (optional)
     * @return void
     */
    fun updateUser(username: kotlin.String, id: kotlin.Long? = null, username2: kotlin.String? = null, firstName: kotlin.String? = null, lastName: kotlin.String? = null, email: kotlin.String? = null, password: kotlin.String? = null, phone: kotlin.String? = null, userStatus: kotlin.Int? = null): Unit {
        val localVariableBody: kotlin.Any? = mapOf("id" to "$id", "username" to "$username", "firstName" to "$firstName", "lastName" to "$lastName", "email" to "$email", "password" to "$password", "phone" to "$phone", "userStatus" to "$userStatus")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/user/{username}".replace("{" + "username" + "}", "$username"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
