/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.ArrayByte
import io.swagger.client.model.Client
import java.util.Date
import io.swagger.client.model.Number
import io.swagger.client.model.OuterBoolean
import io.swagger.client.model.OuterComposite
import io.swagger.client.model.OuterNumber
import io.swagger.client.model.OuterString
import io.swagger.client.model.User
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class FakeApi(
  val defBasePath: String = "http://petstore.swagger.io:80/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new FakeApiAsyncHelper(client, config)

  /**
   * 
   * Test serialization of outer boolean types
   *
   * @param body Input boolean as post body (optional)
   * @return OuterBoolean
   */
  def fakeOuterBooleanSerialize(body: Option[OuterBoolean] = None): Option[OuterBoolean] = {
    val await = Try(Await.result(fakeOuterBooleanSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer boolean types
   *
   * @param body Input boolean as post body (optional)
   * @return Future(OuterBoolean)
   */
  def fakeOuterBooleanSerializeAsync(body: Option[OuterBoolean] = None): Future[OuterBoolean] = {
      helper.fakeOuterBooleanSerialize(body)
  }

  /**
   * 
   * Test serialization of object with outer number type
   *
   * @param body Input composite as post body (optional)
   * @return OuterComposite
   */
  def fakeOuterCompositeSerialize(body: Option[OuterComposite] = None): Option[OuterComposite] = {
    val await = Try(Await.result(fakeOuterCompositeSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of object with outer number type
   *
   * @param body Input composite as post body (optional)
   * @return Future(OuterComposite)
   */
  def fakeOuterCompositeSerializeAsync(body: Option[OuterComposite] = None): Future[OuterComposite] = {
      helper.fakeOuterCompositeSerialize(body)
  }

  /**
   * 
   * Test serialization of outer number types
   *
   * @param body Input number as post body (optional)
   * @return OuterNumber
   */
  def fakeOuterNumberSerialize(body: Option[OuterNumber] = None): Option[OuterNumber] = {
    val await = Try(Await.result(fakeOuterNumberSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer number types
   *
   * @param body Input number as post body (optional)
   * @return Future(OuterNumber)
   */
  def fakeOuterNumberSerializeAsync(body: Option[OuterNumber] = None): Future[OuterNumber] = {
      helper.fakeOuterNumberSerialize(body)
  }

  /**
   * 
   * Test serialization of outer string types
   *
   * @param body Input string as post body (optional)
   * @return OuterString
   */
  def fakeOuterStringSerialize(body: Option[OuterString] = None): Option[OuterString] = {
    val await = Try(Await.result(fakeOuterStringSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer string types
   *
   * @param body Input string as post body (optional)
   * @return Future(OuterString)
   */
  def fakeOuterStringSerializeAsync(body: Option[OuterString] = None): Future[OuterString] = {
      helper.fakeOuterStringSerialize(body)
  }

  /**
   * 
   * 
   *
   * @param body  
   * @param query  
   * @return void
   */
  def testBodyWithQueryParams(body: User, query: String) = {
    val await = Try(Await.result(testBodyWithQueryParamsAsync(body, query), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param body  
   * @param query  
   * @return Future(void)
   */
  def testBodyWithQueryParamsAsync(body: User, query: String) = {
      helper.testBodyWithQueryParams(body, query)
  }

  /**
   * To test \&quot;client\&quot; model
   * To test \&quot;client\&quot; model
   *
   * @param body client model 
   * @return Client
   */
  def testClientModel(body: Client): Option[Client] = {
    val await = Try(Await.result(testClientModelAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * To test \&quot;client\&quot; model asynchronously
   * To test \&quot;client\&quot; model
   *
   * @param body client model 
   * @return Future(Client)
   */
  def testClientModelAsync(body: Client): Future[Client] = {
      helper.testClientModel(body)
  }

  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   *
   * @param number None 
   * @param double None 
   * @param patternWithoutDelimiter None 
   * @param byte None 
   * @param integer None (optional)
   * @param int32 None (optional)
   * @param int64 None (optional)
   * @param float None (optional)
   * @param string None (optional)
   * @param binary None (optional)
   * @param date None (optional)
   * @param dateTime None (optional)
   * @param password None (optional)
   * @param callback None (optional)
   * @return void
   */
  def testEndpointParameters(number: Number, double: Double, patternWithoutDelimiter: String, byte: Array[Byte], integer: Option[Integer] = None, int32: Option[Integer] = None, int64: Option[Long] = None, float: Option[Float] = None, string: Option[String] = None, binary: Option[Array[Byte]] = None, date: Option[Date] = None, dateTime: Option[Date] = None, password: Option[String] = None, callback: Option[String] = None) = {
    val await = Try(Await.result(testEndpointParametersAsync(number, double, patternWithoutDelimiter, byte, integer, int32, int64, float, string, binary, date, dateTime, password, callback), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트  asynchronously
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   *
   * @param number None 
   * @param double None 
   * @param patternWithoutDelimiter None 
   * @param byte None 
   * @param integer None (optional)
   * @param int32 None (optional)
   * @param int64 None (optional)
   * @param float None (optional)
   * @param string None (optional)
   * @param binary None (optional)
   * @param date None (optional)
   * @param dateTime None (optional)
   * @param password None (optional)
   * @param callback None (optional)
   * @return Future(void)
   */
  def testEndpointParametersAsync(number: Number, double: Double, patternWithoutDelimiter: String, byte: Array[Byte], integer: Option[Integer] = None, int32: Option[Integer] = None, int64: Option[Long] = None, float: Option[Float] = None, string: Option[String] = None, binary: Option[Array[Byte]] = None, date: Option[Date] = None, dateTime: Option[Date] = None, password: Option[String] = None, callback: Option[String] = None) = {
      helper.testEndpointParameters(number, double, patternWithoutDelimiter, byte, integer, int32, int64, float, string, binary, date, dateTime, password, callback)
  }

  /**
   * To test enum parameters
   * To test enum parameters
   *
   * @param enumFormStringArray Form parameter enum test (string array) (optional)
   * @param enumFormString Form parameter enum test (string) (optional, default to -efg)
   * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
   * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
   * @param enumQueryStringArray Query parameter enum test (string array) (optional)
   * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
   * @param enumQueryInteger Query parameter enum test (double) (optional)
   * @param enumQueryDouble Query parameter enum test (double) (optional)
   * @return void
   */
  def testEnumParameters(enumFormStringArray: Option[List[String]] = None, enumFormString: Option[String] = Option("-efg"), enumHeaderStringArray: Option[List[String]] = None, enumHeaderString: Option[String] = Option("-efg"), enumQueryStringArray: Option[List[String]] = None, enumQueryString: Option[String] = Option("-efg"), enumQueryInteger: Option[Integer] = None, enumQueryDouble: Option[Double] = None) = {
    val await = Try(Await.result(testEnumParametersAsync(enumFormStringArray, enumFormString, enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * To test enum parameters asynchronously
   * To test enum parameters
   *
   * @param enumFormStringArray Form parameter enum test (string array) (optional)
   * @param enumFormString Form parameter enum test (string) (optional, default to -efg)
   * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
   * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
   * @param enumQueryStringArray Query parameter enum test (string array) (optional)
   * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
   * @param enumQueryInteger Query parameter enum test (double) (optional)
   * @param enumQueryDouble Query parameter enum test (double) (optional)
   * @return Future(void)
   */
  def testEnumParametersAsync(enumFormStringArray: Option[List[String]] = None, enumFormString: Option[String] = Option("-efg"), enumHeaderStringArray: Option[List[String]] = None, enumHeaderString: Option[String] = Option("-efg"), enumQueryStringArray: Option[List[String]] = None, enumQueryString: Option[String] = Option("-efg"), enumQueryInteger: Option[Integer] = None, enumQueryDouble: Option[Double] = None) = {
      helper.testEnumParameters(enumFormStringArray, enumFormString, enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble)
  }

  /**
   * test inline additionalProperties
   * 
   *
   * @param param request body 
   * @return void
   */
  def testInlineAdditionalProperties(param: Any) = {
    val await = Try(Await.result(testInlineAdditionalPropertiesAsync(param), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * test inline additionalProperties asynchronously
   * 
   *
   * @param param request body 
   * @return Future(void)
   */
  def testInlineAdditionalPropertiesAsync(param: Any) = {
      helper.testInlineAdditionalProperties(param)
  }

  /**
   * test json serialization of form data
   * 
   *
   * @param param field1 
   * @param param2 field2 
   * @return void
   */
  def testJsonFormData(param: String, param2: String) = {
    val await = Try(Await.result(testJsonFormDataAsync(param, param2), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * test json serialization of form data asynchronously
   * 
   *
   * @param param field1 
   * @param param2 field2 
   * @return Future(void)
   */
  def testJsonFormDataAsync(param: String, param2: String) = {
      helper.testJsonFormData(param, param2)
  }

}

class FakeApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def fakeOuterBooleanSerialize(body: Option[OuterBoolean] = None
    )(implicit reader: ClientResponseReader[OuterBoolean], writer: RequestWriter[Option[OuterBoolean]]): Future[OuterBoolean] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/boolean"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterCompositeSerialize(body: Option[OuterComposite] = None
    )(implicit reader: ClientResponseReader[OuterComposite], writer: RequestWriter[Option[OuterComposite]]): Future[OuterComposite] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/composite"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterNumberSerialize(body: Option[OuterNumber] = None
    )(implicit reader: ClientResponseReader[OuterNumber], writer: RequestWriter[Option[OuterNumber]]): Future[OuterNumber] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/number"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterStringSerialize(body: Option[OuterString] = None
    )(implicit reader: ClientResponseReader[OuterString], writer: RequestWriter[Option[OuterString]]): Future[OuterString] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/string"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testBodyWithQueryParams(body: User,
    query: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[User]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/body-with-query-params"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testBodyWithQueryParams")
    if (query == null) throw new Exception("Missing required parameter 'query' when calling FakeApi->testBodyWithQueryParams")

    queryParams += "query" -> query.toString

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testClientModel(body: Client)(implicit reader: ClientResponseReader[Client], writer: RequestWriter[Client]): Future[Client] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testClientModel")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testEndpointParameters(number: Number,
    double: Double,
    patternWithoutDelimiter: String,
    byte: Array[Byte],
    integer: Option[Integer] = None,
    int32: Option[Integer] = None,
    int64: Option[Long] = None,
    float: Option[Float] = None,
    string: Option[String] = None,
    binary: Option[Array[Byte]] = None,
    date: Option[Date] = None,
    dateTime: Option[Date] = None,
    password: Option[String] = None,
    callback: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (patternWithoutDelimiter == null) throw new Exception("Missing required parameter 'patternWithoutDelimiter' when calling FakeApi->testEndpointParameters")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testEnumParameters(enumFormStringArray: Option[List[String]] = None,
    enumFormString: Option[String] = Option("-efg"),
    enumHeaderStringArray: Option[List[String]] = None,
    enumHeaderString: Option[String] = Option("-efg"),
    enumQueryStringArray: Option[List[String]] = None,
    enumQueryString: Option[String] = Option("-efg"),
    enumQueryInteger: Option[Integer] = None,
    enumQueryDouble: Option[Double] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    enumQueryStringArray match {
      case Some(param) => queryParams += "enum_query_string_array" -> param.toString
      case _ => queryParams
    }
    enumQueryString match {
      case Some(param) => queryParams += "enum_query_string" -> param.toString
      case _ => queryParams
    }
    enumQueryInteger match {
      case Some(param) => queryParams += "enum_query_integer" -> param.toString
      case _ => queryParams
    }
    enumHeaderStringArray match {
      case Some(param) => headerParams += "enum_header_string_array" -> param.toString
      case _ => headerParams
    }
    enumHeaderString match {
      case Some(param) => headerParams += "enum_header_string" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testInlineAdditionalProperties(param: Any)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Any]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/inline-additionalProperties"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(param))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testJsonFormData(param: String,
    param2: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/jsonFormData"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (param == null) throw new Exception("Missing required parameter 'param' when calling FakeApi->testJsonFormData")

    if (param2 == null) throw new Exception("Missing required parameter 'param2' when calling FakeApi->testJsonFormData")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
