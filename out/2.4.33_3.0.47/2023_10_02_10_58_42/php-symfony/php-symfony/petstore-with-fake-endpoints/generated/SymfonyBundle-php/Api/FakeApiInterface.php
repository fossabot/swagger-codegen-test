<?php
/**
 * FakeApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use Swagger\Server\Model\Client;
use Swagger\Server\Model\Date;
use Swagger\Server\Model\OuterBoolean;
use Swagger\Server\Model\OuterComposite;
use Swagger\Server\Model\OuterNumber;
use Swagger\Server\Model\OuterString;
use Swagger\Server\Model\User;

/**
 * FakeApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  Swagger\Server\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
interface FakeApiInterface
{

    /**
     * Sets authentication method http_basic_test
     *
     * @param string $value Value of the http_basic_test authentication method.
     *
     * @return void
     */
    public function sethttp_basic_test($value);

    /**
     * Operation fakeOuterBooleanSerialize
     *
     * @param  Swagger\Server\Model\OuterBoolean $body  Input boolean as post body (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\OuterBoolean[]
     *
     */
    public function fakeOuterBooleanSerialize(OuterBoolean $body = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation fakeOuterCompositeSerialize
     *
     * @param  Swagger\Server\Model\OuterComposite $body  Input composite as post body (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\OuterComposite[]
     *
     */
    public function fakeOuterCompositeSerialize(OuterComposite $body = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation fakeOuterNumberSerialize
     *
     * @param  Swagger\Server\Model\OuterNumber $body  Input number as post body (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\OuterNumber[]
     *
     */
    public function fakeOuterNumberSerialize(OuterNumber $body = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation fakeOuterStringSerialize
     *
     * @param  Swagger\Server\Model\OuterString $body  Input string as post body (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\OuterString[]
     *
     */
    public function fakeOuterStringSerialize(OuterString $body = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation testBodyWithQueryParams
     *
     * @param  Swagger\Server\Model\User $body   (required)
     * @param  string $query   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function testBodyWithQueryParams(User $body, $query, &$responseCode, array &$responseHeaders);

    /**
     * Operation testClientModel
     *
     * To test \"client\" model
     *
     * @param  Swagger\Server\Model\Client $body  client model (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\Client[]
     *
     */
    public function testClientModel(Client $body, &$responseCode, array &$responseHeaders);

    /**
     * Operation testEndpointParameters
     *
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
     *
     * @param  float $number  None (required)
     * @param  double $double  None (required)
     * @param  string $patternWithoutDelimiter  None (required)
     * @param  string $byte  None (required)
     * @param  int $integer  None (optional)
     * @param  int $int32  None (optional)
     * @param  int $int64  None (optional)
     * @param  float $float  None (optional)
     * @param  string $string  None (optional)
     * @param  string $binary  None (optional)
     * @param  \DateTime $date  None (optional)
     * @param  \DateTime $dateTime  None (optional)
     * @param  string $password  None (optional)
     * @param  string $callback  None (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function testEndpointParameters($number, $double, $patternWithoutDelimiter, $byte, $integer = null, $int32 = null, $int64 = null, $float = null, $string = null, $binary = null, \DateTime $date = null, \DateTime $dateTime = null, $password = null, $callback = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation testEnumParameters
     *
     * To test enum parameters
     *
     * @param  string[] $enumFormStringArray  Form parameter enum test (string array) (optional)
     * @param  string $enumFormString  Form parameter enum test (string) (optional, default to '-efg')
     * @param  string[] $enumHeaderStringArray  Header parameter enum test (string array) (optional)
     * @param  string $enumHeaderString  Header parameter enum test (string) (optional, default to '-efg')
     * @param  string[] $enumQueryStringArray  Query parameter enum test (string array) (optional)
     * @param  string $enumQueryString  Query parameter enum test (string) (optional, default to '-efg')
     * @param  int $enumQueryInteger  Query parameter enum test (double) (optional)
     * @param  double $enumQueryDouble  Query parameter enum test (double) (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function testEnumParameters(array $enumFormStringArray = null, $enumFormString = '-efg', array $enumHeaderStringArray = null, $enumHeaderString = '-efg', array $enumQueryStringArray = null, $enumQueryString = '-efg', $enumQueryInteger = null, $enumQueryDouble = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation testInlineAdditionalProperties
     *
     * test inline additionalProperties
     *
     * @param  array $param  request body (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function testInlineAdditionalProperties(array $param, &$responseCode, array &$responseHeaders);

    /**
     * Operation testJsonFormData
     *
     * test json serialization of form data
     *
     * @param  string $param  field1 (required)
     * @param  string $param2  field2 (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function testJsonFormData($param, $param2, &$responseCode, array &$responseHeaders);
}
