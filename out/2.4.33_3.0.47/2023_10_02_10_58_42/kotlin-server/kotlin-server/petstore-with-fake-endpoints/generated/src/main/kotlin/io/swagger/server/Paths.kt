/**
* Swagger Petstore
* This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method



// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * To test special tags
     * To test special tags
     */
    @Location("/another-fake/dummy") class testSpecialTags()
    /**
     * 
     * Test serialization of outer boolean types
     */
    @Location("/fake/outer/boolean") class fakeOuterBooleanSerialize()
    /**
     * 
     * Test serialization of object with outer number type
     */
    @Location("/fake/outer/composite") class fakeOuterCompositeSerialize()
    /**
     * 
     * Test serialization of outer number types
     */
    @Location("/fake/outer/number") class fakeOuterNumberSerialize()
    /**
     * 
     * Test serialization of outer string types
     */
    @Location("/fake/outer/string") class fakeOuterStringSerialize()
    /**
     * 
     * 
     */
    @Location("/fake/body-with-query-params") class testBodyWithQueryParams()
    /**
     * To test \&quot;client\&quot; model
     * To test &quot;client&quot; model
     */
    @Location("/fake") class testClientModel()
    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * Fake endpoint for testing various parameters
假端點
偽のエンドポイント
가짜 엔드 포인트

     */
    @Location("/fake") class testEndpointParameters()
    /**
     * To test enum parameters
     * To test enum parameters
     */
    @Location("/fake") class testEnumParameters()
    /**
     * test inline additionalProperties
     * 
     */
    @Location("/fake/inline-additionalProperties") class testInlineAdditionalProperties()
    /**
     * test json serialization of form data
     * 
     */
    @Location("/fake/jsonFormData") class testJsonFormData()
    /**
     * To test class name in snake case
     * To test class name in snake case
     */
    @Location("/fake_classname_test") class testClassname()
    /**
     * Add a new pet to the store
     * 
     */
    @Location("/pet") class addPet()
    /**
     * Deletes a pet
     * 
     */
    @Location("/pet/{petId}") class deletePet()
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     */
    @Location("/pet/findByStatus") class findPetsByStatus()
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    @Location("/pet/findByTags") class findPetsByTags()
    /**
     * Find pet by ID
     * Returns a single pet
     */
    @Location("/pet/{petId}") class getPetById()
    /**
     * Update an existing pet
     * 
     */
    @Location("/pet") class updatePet()
    /**
     * Updates a pet in the store with form data
     * 
     */
    @Location("/pet/{petId}") class updatePetWithForm()
    /**
     * uploads an image
     * 
     */
    @Location("/pet/{petId}/uploadImage") class uploadFile()
    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     */
    @Location("/store/order/{order_id}") class deleteOrder()
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    @Location("/store/inventory") class getInventory()
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     */
    @Location("/store/order/{order_id}") class getOrderById()
    /**
     * Place an order for a pet
     * 
     */
    @Location("/store/order") class placeOrder()
    /**
     * Create user
     * This can only be done by the logged in user.
     */
    @Location("/user") class createUser()
    /**
     * Creates list of users with given input array
     * 
     */
    @Location("/user/createWithArray") class createUsersWithArrayInput()
    /**
     * Creates list of users with given input array
     * 
     */
    @Location("/user/createWithList") class createUsersWithListInput()
    /**
     * Delete user
     * This can only be done by the logged in user.
     */
    @Location("/user/{username}") class deleteUser()
    /**
     * Get user by user name
     * 
     */
    @Location("/user/{username}") class getUserByName()
    /**
     * Logs user into the system
     * 
     */
    @Location("/user/login") class loginUser()
    /**
     * Logs out current logged in user session
     * 
     */
    @Location("/user/logout") class logoutUser()
    /**
     * Updated user
     * This can only be done by the logged in user.
     */
    @Location("/user/{username}") class updateUser()
}
