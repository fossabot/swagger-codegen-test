/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';


import { User } from '../model/user';


import { Configuration }                                     from '../configuration';


export interface UserServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Create user
    * This can only be done by the logged in user.
    * @param id 
    * @param username 
    * @param firstName 
    * @param lastName 
    * @param email 
    * @param password 
    * @param phone 
    * @param userStatus 
    */
    createUser(id?: number, username?: string, firstName?: string, lastName?: string, email?: string, password?: string, phone?: string, userStatus?: number, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Creates list of users with given input array
    * Creates list of users with given input array
    * @param body 
    */
    createUsersWithListInput(body?: Array<User>, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Delete user
    * This can only be done by the logged in user.
    * @param username The name that needs to be deleted
    */
    deleteUser(username: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Get user by user name
    * 
    * @param username The name that needs to be fetched. Use user1 for testing. 
    */
    getUserByName(username: string, extraHttpRequestParams?: any): Observable<User>;

    /**
    * Logs user into the system
    * 
    * @param username The user name for login
    * @param password The password for login in clear text
    */
    loginUser(username?: string, password?: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Logs out current logged in user session
    * 
    */
    logoutUser(extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Update user
    * This can only be done by the logged in user.
    * @param username2 name that need to be deleted
    * @param id 
    * @param username 
    * @param firstName 
    * @param lastName 
    * @param email 
    * @param password 
    * @param phone 
    * @param userStatus 
    */
    updateUser(username2: string, id?: number, username?: string, firstName?: string, lastName?: string, email?: string, password?: string, phone?: string, userStatus?: number, extraHttpRequestParams?: any): Observable<{}>;

}
