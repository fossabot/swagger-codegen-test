<?php
/**
 * Pup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Swagger Petstore
 *
* This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
* OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.1
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Pup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Pup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Pup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bark' => 'bool',
'breed' => 'string',
'hunts' => 'bool',
'age' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bark' => null,
'breed' => null,
'hunts' => null,
'age' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bark' => 'bark',
'breed' => 'breed',
'hunts' => 'hunts',
'age' => 'age'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bark' => 'setBark',
'breed' => 'setBreed',
'hunts' => 'setHunts',
'age' => 'setAge'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bark' => 'getBark',
'breed' => 'getBreed',
'hunts' => 'getHunts',
'age' => 'getAge'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BREED_DINGO = 'Dingo';
const BREED_HUSKY = 'Husky';
const BREED_RETRIEVER = 'Retriever';
const BREED_SHEPHERD = 'Shepherd';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBreedAllowableValues()
    {
        return [
            self::BREED_DINGO,
self::BREED_HUSKY,
self::BREED_RETRIEVER,
self::BREED_SHEPHERD,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bark'] = isset($data['bark']) ? $data['bark'] : null;
        $this->container['breed'] = isset($data['breed']) ? $data['breed'] : null;
        $this->container['hunts'] = isset($data['hunts']) ? $data['hunts'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBreedAllowableValues();
        if (!in_array($this->container['breed'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'breed', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getBreedAllowableValues();
        if (!in_array($this->container['breed'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets bark
     *
     * @return bool
     */
    public function getBark()
    {
        return $this->container['bark'];
    }

    /**
     * Sets bark
     *
     * @param bool $bark bark
     *
     * @return $this
     */
    public function setBark($bark)
    {
        $this->container['bark'] = $bark;

        return $this;
    }

    /**
     * Gets breed
     *
     * @return string
     */
    public function getBreed()
    {
        return $this->container['breed'];
    }

    /**
     * Sets breed
     *
     * @param string $breed breed
     *
     * @return $this
     */
    public function setBreed($breed)
    {
        $allowedValues = $this->getBreedAllowableValues();
        if (!is_null($breed) && !in_array($breed, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'breed', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['breed'] = $breed;

        return $this;
    }

    /**
     * Gets hunts
     *
     * @return bool
     */
    public function getHunts()
    {
        return $this->container['hunts'];
    }

    /**
     * Sets hunts
     *
     * @param bool $hunts hunts
     *
     * @return $this
     */
    public function setHunts($hunts)
    {
        $this->container['hunts'] = $hunts;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
