/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface AdditionalPropertiesClass {
  mapProperty?: { [key: string]: string; };
  mapOfMapProperty?: { [key: string]: { [key: string]: string; }; };
}

export interface Animal {
  className: string;
  color?: string;
}

export interface AnimalFarm extends Array<Animal> {
}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}

export interface ArrayOfArrayOfNumberOnly {
  arrayArrayNumber?: Array<Array<number>>;
}

export interface ArrayOfNumberOnly {
  arrayNumber?: Array<number>;
}

export interface ArrayTest {
  arrayOfString?: Array<string>;
  arrayArrayOfInteger?: Array<Array<number>>;
  arrayArrayOfModel?: Array<Array<ReadOnlyFirst>>;
}

export interface Capitalization {
  smallCamel?: string;
  capitalCamel?: string;
  smallSnake?: string;
  capitalSnake?: string;
  sCAETHFlowPoints?: string;
  /**
   * Name of the pet 
   */
  ATT_NAME?: string;
}

export interface Category {
  id?: number;
  name?: string;
}

/**
 * Model for testing model with \"_class\" property
 */
export interface ClassModel {
  _class?: string;
}

export interface Client {
  client?: string;
}

export interface EnumArrays {
  justSymbol?: EnumArraysJustSymbolEnum;
  arrayEnum?: Array<EnumArraysArrayEnumEnum>;
}

/**
 * Enum for the justSymbol property.
 */
export type EnumArraysJustSymbolEnum = '>=' | '$';

/**
 * Enum for the arrayEnum property.
 */
export type EnumArraysArrayEnumEnum = 'fish' | 'crab';

export type EnumClass = '_abc' | '-efg' | '(xyz)';
export interface EnumTest {
  enumString?: EnumTestEnumStringEnum;
  enumStringRequired: EnumTestEnumStringRequiredEnum;
  enumInteger?: EnumTestEnumIntegerEnum;
  enumNumber?: EnumTestEnumNumberEnum;
  outerEnum?: OuterEnum;
}

/**
 * Enum for the enumString property.
 */
export type EnumTestEnumStringEnum = 'UPPER' | 'lower' | '';

/**
 * Enum for the enumStringRequired property.
 */
export type EnumTestEnumStringRequiredEnum = 'UPPER' | 'lower' | '';

/**
 * Enum for the enumInteger property.
 */
export type EnumTestEnumIntegerEnum = '1' | '-1';

/**
 * Enum for the enumNumber property.
 */
export type EnumTestEnumNumberEnum = '1.1' | '-1.2';

export interface FormatTest {
  integer?: number;
  int32?: number;
  int64?: number;
  number: number;
  _float?: number;
  _double?: number;
  string?: string;
  _byte: string;
  binary?: string;
  date: string;
  dateTime?: Date;
  uuid?: string;
  password: string;
}

export interface HasOnlyReadOnly {
  bar?: string;
  foo?: string;
}

/**
 * True or False indicator
 */
export type Ints = '0' | '1' | '2' | '3' | '4' | '5' | '6';
export interface List {
  _123List?: string;
}

export interface MapTest {
  mapMapOfString?: { [key: string]: { [key: string]: string; }; };
  mapOfEnumString?: { [key: string]: string; };
}

/**
 * Enum for the mapOfEnumString property.
 */
export type MapTestMapOfEnumStringEnum = 'UPPER' | 'lower';

export interface MixedPropertiesAndAdditionalPropertiesClass {
  uuid?: string;
  dateTime?: Date;
  map?: { [key: string]: Animal; };
}

/**
 * Model for testing model name starting with number
 */
export interface Model200Response {
  name?: number;
  _class?: string;
}

/**
 * True or False indicator
 */
export type ModelBoolean = 'true' | 'false';
/**
 * Model for testing reserved words
 */
export interface ModelReturn {
  _return?: number;
}

/**
 * Model for testing model name same as property name
 */
export interface Name {
  name: number;
  snakeCase?: number;
  property?: string;
  _123Number?: number;
}

export interface NumberOnly {
  justNumber?: number;
}

/**
 * some number
 */
export type Numbers = '7' | '8' | '9' | '10';
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
  /**
   * Order Status
   */
  status?: OrderStatusEnum;
  complete?: boolean;
}

/**
 * Enum for the status property.
 */
export type OrderStatusEnum = 'placed' | 'approved' | 'delivered';

export interface OuterBoolean {
}

export interface OuterComposite {
  myNumber?: OuterNumber;
  myString?: OuterString;
  myBoolean?: OuterBoolean;
}

export type OuterEnum = 'placed' | 'approved' | 'delivered';
export interface OuterNumber {
}

export interface OuterString {
}

export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: Array<string>;
  tags?: Array<Tag>;
  /**
   * pet status in the store
   */
  status?: PetStatusEnum;
}

/**
 * Enum for the status property.
 */
export type PetStatusEnum = 'available' | 'pending' | 'sold';

export interface ReadOnlyFirst {
  bar?: string;
  baz?: string;
}

export interface SpecialModelName {
  specialPropertyName?: number;
}

export interface Tag {
  id?: number;
  name?: string;
}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   */
  userStatus?: number;
}

export interface Cat extends Animal {
  declawed?: boolean;
}

export interface Dog extends Animal {
  breed?: string;
}

