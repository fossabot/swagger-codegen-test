/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Client,
} from './models';

/**
 * testSpecialTags - parameters interface
 */
export interface ITestSpecialTagsParams {
  body: Client;
}

/**
 * AnotherFakeApi - API class
 */
@autoinject()
export class AnotherFakeApi extends Api {

  /**
   * Creates a new AnotherFakeApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * To test special tags
   * To test special tags
   * @param params.body client model
   */
  async testSpecialTags(params: ITestSpecialTagsParams): Promise<Client> {
    // Verify required parameters are set
    this.ensureParamIsSet('testSpecialTags', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/another-fake/dummy`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

