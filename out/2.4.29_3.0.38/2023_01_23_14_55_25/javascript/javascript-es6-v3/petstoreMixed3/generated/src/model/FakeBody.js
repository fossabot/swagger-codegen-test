/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.38
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The FakeBody model module.
 * @module model/FakeBody
 * @version 1.0.0
 */
export class FakeBody {
  /**
   * Constructs a new <code>FakeBody</code>.
   * @alias module:model/FakeBody
   * @class
   * @param _number {Number} None
   * @param _double {Number} None
   * @param patternWithoutDelimiter {String} None
   * @param _byte {Blob} None
   */
  constructor(_number, _double, patternWithoutDelimiter, _byte) {
    this._number = _number;
    this._double = _double;
    this.patternWithoutDelimiter = patternWithoutDelimiter;
    this._byte = _byte;
  }

  /**
   * Constructs a <code>FakeBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FakeBody} obj Optional instance to populate.
   * @return {module:model/FakeBody} The populated <code>FakeBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FakeBody();
      if (data.hasOwnProperty('integer'))
        obj.integer = ApiClient.convertToType(data['integer'], 'Number');
      if (data.hasOwnProperty('int32'))
        obj.int32 = ApiClient.convertToType(data['int32'], 'Number');
      if (data.hasOwnProperty('int64'))
        obj.int64 = ApiClient.convertToType(data['int64'], 'Number');
      if (data.hasOwnProperty('number'))
        obj._number = ApiClient.convertToType(data['number'], 'Number');
      if (data.hasOwnProperty('float'))
        obj._float = ApiClient.convertToType(data['float'], 'Number');
      if (data.hasOwnProperty('double'))
        obj._double = ApiClient.convertToType(data['double'], 'Number');
      if (data.hasOwnProperty('string'))
        obj._string = ApiClient.convertToType(data['string'], 'String');
      if (data.hasOwnProperty('pattern_without_delimiter'))
        obj.patternWithoutDelimiter = ApiClient.convertToType(data['pattern_without_delimiter'], 'String');
      if (data.hasOwnProperty('byte'))
        obj._byte = ApiClient.convertToType(data['byte'], 'Blob');
      if (data.hasOwnProperty('binary'))
        obj.binary = ApiClient.convertToType(data['binary'], 'Blob');
      if (data.hasOwnProperty('date'))
        obj._date = ApiClient.convertToType(data['date'], 'Date');
      if (data.hasOwnProperty('dateTime'))
        obj.dateTime = ApiClient.convertToType(data['dateTime'], 'Date');
      if (data.hasOwnProperty('password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (data.hasOwnProperty('callback'))
        obj.callback = ApiClient.convertToType(data['callback'], 'String');
    }
    return obj;
  }
}

/**
 * None
 * @member {Number} integer
 */
FakeBody.prototype.integer = undefined;

/**
 * None
 * @member {Number} int32
 */
FakeBody.prototype.int32 = undefined;

/**
 * None
 * @member {Number} int64
 */
FakeBody.prototype.int64 = undefined;

/**
 * None
 * @member {Number} _number
 */
FakeBody.prototype._number = undefined;

/**
 * None
 * @member {Number} _float
 */
FakeBody.prototype._float = undefined;

/**
 * None
 * @member {Number} _double
 */
FakeBody.prototype._double = undefined;

/**
 * None
 * @member {String} _string
 */
FakeBody.prototype._string = undefined;

/**
 * None
 * @member {String} patternWithoutDelimiter
 */
FakeBody.prototype.patternWithoutDelimiter = undefined;

/**
 * None
 * @member {Blob} _byte
 */
FakeBody.prototype._byte = undefined;

/**
 * None
 * @member {Blob} binary
 */
FakeBody.prototype.binary = undefined;

/**
 * None
 * @member {Date} _date
 */
FakeBody.prototype._date = undefined;

/**
 * None
 * @member {Date} dateTime
 */
FakeBody.prototype.dateTime = undefined;

/**
 * None
 * @member {String} password
 */
FakeBody.prototype.password = undefined;

/**
 * None
 * @member {String} callback
 */
FakeBody.prototype.callback = undefined;

