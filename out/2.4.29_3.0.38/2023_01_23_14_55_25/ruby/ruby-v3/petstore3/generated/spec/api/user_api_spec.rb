=begin
#Swagger Petstore - OpenAPI 3.0

#This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

OpenAPI spec version: 1.0.5
Contact: apiteam@swagger.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.38
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::UserApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @instance = SwaggerClient::UserApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instance of UserApi' do
      expect(@instance).to be_instance_of(SwaggerClient::UserApi)
    end
  end

  # unit tests for create_user
  # Create user
  # This can only be done by the logged in user.
  # @param [Hash] opts the optional parameters
  # @option opts [User] :body Created user object
  # @return [User]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_user
  # Create user
  # This can only be done by the logged in user.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id 
  # @option opts [String] :username 
  # @option opts [String] :first_name 
  # @option opts [String] :last_name 
  # @option opts [String] :email 
  # @option opts [String] :password 
  # @option opts [String] :phone 
  # @option opts [Integer] :user_status 
  # @return [User]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_users_with_list_input
  # Creates list of users with given input array
  # Creates list of users with given input array
  # @param [Hash] opts the optional parameters
  # @option opts [Array<User>] :body 
  # @return [User]
  describe 'create_users_with_list_input test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user
  # Delete user
  # This can only be done by the logged in user.
  # @param username The name that needs to be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_name
  # Get user by user name
  # @param username The name that needs to be fetched. Use user1 for testing. 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user_by_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for login_user
  # Logs user into the system
  # @param [Hash] opts the optional parameters
  # @option opts [String] :username The user name for login
  # @option opts [String] :password The password for login in clear text
  # @return [String]
  describe 'login_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logout_user
  # Logs out current logged in user session
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'logout_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update user
  # This can only be done by the logged in user.
  # @param username name that need to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [User] :body Update an existent user in the store
  # @return [nil]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update user
  # This can only be done by the logged in user.
  # @param username name that need to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id 
  # @option opts [String] :username2 
  # @option opts [String] :first_name 
  # @option opts [String] :last_name 
  # @option opts [String] :email 
  # @option opts [String] :password 
  # @option opts [String] :phone 
  # @option opts [Integer] :user_status 
  # @return [nil]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
