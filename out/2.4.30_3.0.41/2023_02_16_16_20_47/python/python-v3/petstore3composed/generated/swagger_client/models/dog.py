# coding: utf-8

"""
    Swagger Petstore

    This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.pet import Pet  # noqa: F401,E501

class Dog(Pet):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bark': 'bool',
        'breed': 'str'
    }
    if hasattr(Pet, "swagger_types"):
        swagger_types.update(Pet.swagger_types)

    attribute_map = {
        'bark': 'bark',
        'breed': 'breed'
    }
    if hasattr(Pet, "attribute_map"):
        attribute_map.update(Pet.attribute_map)

    def __init__(self, bark=None, breed=None, *args, **kwargs):  # noqa: E501
        """Dog - a model defined in Swagger"""  # noqa: E501
        self._bark = None
        self._breed = None
        self.discriminator = None
        if bark is not None:
            self.bark = bark
        if breed is not None:
            self.breed = breed
        Pet.__init__(self, *args, **kwargs)

    @property
    def bark(self):
        """Gets the bark of this Dog.  # noqa: E501


        :return: The bark of this Dog.  # noqa: E501
        :rtype: bool
        """
        return self._bark

    @bark.setter
    def bark(self, bark):
        """Sets the bark of this Dog.


        :param bark: The bark of this Dog.  # noqa: E501
        :type: bool
        """

        self._bark = bark

    @property
    def breed(self):
        """Gets the breed of this Dog.  # noqa: E501


        :return: The breed of this Dog.  # noqa: E501
        :rtype: str
        """
        return self._breed

    @breed.setter
    def breed(self, breed):
        """Sets the breed of this Dog.


        :param breed: The breed of this Dog.  # noqa: E501
        :type: str
        """
        allowed_values = ["Dingo", "Husky", "Retriever", "Shepherd"]  # noqa: E501
        if breed not in allowed_values:
            raise ValueError(
                "Invalid value for `breed` ({0}), must be one of {1}"  # noqa: E501
                .format(breed, allowed_values)
            )

        self._breed = breed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
