/*
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IFakeApiController
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer boolean types</remarks>
        /// <param name="body">Input boolean as post body</param>
        /// <response code="200">Output boolean</response>
        IActionResult FakeOuterBooleanSerialize([FromBody]bool? body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of object with outer number type</remarks>
        /// <param name="body">Input composite as post body</param>
        /// <response code="200">Output composite</response>
        IActionResult FakeOuterCompositeSerialize([FromBody]OuterComposite body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer number types</remarks>
        /// <param name="body">Input number as post body</param>
        /// <response code="200">Output number</response>
        IActionResult FakeOuterNumberSerialize([FromBody]decimal? body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer string types</remarks>
        /// <param name="body">Input string as post body</param>
        /// <response code="200">Output string</response>
        IActionResult FakeOuterStringSerialize([FromBody]string body);

        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>To test \&quot;client\&quot; model</remarks>
        /// <param name="body">client model</param>
        /// <response code="200">successful operation</response>
        IActionResult TestClientModel([FromBody]ModelClient body);

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 </remarks>
        /// <param name="body"></param>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        IActionResult TestEndpointParameters([FromBody]FakeBody body);

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>To test enum parameters</remarks>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array)</param>
        /// <param name="enumQueryString">Query parameter enum test (string)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double)</param>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not found</response>
        IActionResult TestEnumParameters([FromHeader]List<string> enumHeaderStringArray, [FromHeader]string enumHeaderString, [FromQuery]List<string> enumQueryStringArray, [FromQuery]string enumQueryString, [FromQuery]int? enumQueryInteger);

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>To test enum parameters</remarks>
        /// <param name="body"></param>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not found</response>
        IActionResult TestEnumRequestBody([FromBody]EnumFormBody body);

        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        
        /// <param name="body">request body</param>
        /// <response code="200">successful operation</response>
        IActionResult TestInlineAdditionalProperties([FromBody]Dictionary<string, string> body);

        /// <summary>
        /// test json serialization of form data
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        IActionResult TestJsonFormData([FromBody]FakeJsonFormDataBody body);
    }
}
