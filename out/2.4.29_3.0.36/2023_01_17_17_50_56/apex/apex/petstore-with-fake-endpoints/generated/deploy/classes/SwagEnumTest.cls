/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: " \
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * SwagEnumTest
 */
public class SwagEnumTest implements Swagger.MappedProperties {
    /**
     * Gets or Sets enumString
     */
    public enum EnumStringEnum {
        UPPER,
        LOWER,
        EMPTY
    }

    /**
     * Get enumString
     * @return enumString
     */
    public EnumStringEnum enumString { get; set; }

    /**
     * Gets or Sets enumStringRequired
     */
    public enum EnumStringRequiredEnum {
        UPPER,
        LOWER,
        EMPTY
    }

    /**
     * Get enumStringRequired
     * @return enumStringRequired
     */
    public EnumStringRequiredEnum enumStringRequired { get; set; }

    /**
     * Gets or Sets enumInteger
     */
    public enum EnumIntegerEnum {
        NUMBER_1,
        NUMBER_MINUS_1
    }

    /**
     * Get enumInteger
     * @return enumInteger
     */
    public EnumIntegerEnum enumInteger { get; set; }

    /**
     * Gets or Sets enumNumber
     */
    public enum EnumNumberEnum {
        NUMBER_1_DOT_1,
        NUMBER_MINUS_1_DOT_2
    }

    /**
     * Get enumNumber
     * @return enumNumber
     */
    public EnumNumberEnum enumNumber { get; set; }

    /**
     * Get outerEnum
     * @return outerEnum
     */
    public SwagOuterEnum outerEnum { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'enum_string' => 'enumString',
        'enum_string_required' => 'enumStringRequired',
        'enum_integer' => 'enumInteger',
        'enum_number' => 'enumNumber'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagEnumTest getExample() {
        SwagEnumTest enumTest = new SwagEnumTest();
        enumTest.enumString = EnumStringEnum.UPPER;
        enumTest.enumStringRequired = EnumStringRequiredEnum.UPPER;
        enumTest.enumInteger = EnumIntegerEnum.NUMBER_123;
        enumTest.enumNumber = EnumNumberEnum.NUMBER_1_DOT_3579;
        enumTest.outerEnum = SwagOuterEnum.getExample();
        return enumTest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagEnumTest) {
            SwagEnumTest enumTest = (SwagEnumTest) obj;
            return this.enumString == enumTest.enumString
                && this.enumStringRequired == enumTest.enumStringRequired
                && this.enumInteger == enumTest.enumInteger
                && this.enumNumber == enumTest.enumNumber
                && this.outerEnum == enumTest.outerEnum;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (enumString == null ? 0 : System.hashCode(enumString));
        hashCode = (17 * hashCode) + (enumStringRequired == null ? 0 : System.hashCode(enumStringRequired));
        hashCode = (17 * hashCode) + (enumInteger == null ? 0 : System.hashCode(enumInteger));
        hashCode = (17 * hashCode) + (enumNumber == null ? 0 : System.hashCode(enumNumber));
        hashCode = (17 * hashCode) + (outerEnum == null ? 0 : System.hashCode(outerEnum));
        return hashCode;
    }
}

