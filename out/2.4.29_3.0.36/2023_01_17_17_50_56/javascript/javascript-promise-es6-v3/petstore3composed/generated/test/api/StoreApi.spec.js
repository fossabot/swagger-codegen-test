/*
 * Swagger Petstore
 * This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerPetstore);
  }
}(this, function(expect, SwaggerPetstore) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerPetstore.StoreApi();
  });

  describe('(package)', function() {
    describe('StoreApi', function() {
      describe('deleteOrder', function() {
        it('should call deleteOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrder call
          /*

          instance.deleteOrder(orderId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInventory', function() {
        it('should call getInventory successfully', function(done) {
          // TODO: uncomment getInventory call and complete the assertions
          /*

          instance.getInventory().then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;number&#x27;);
              // expect(data).to.be(null);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderById', function() {
        it('should call getOrderById successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderById call and complete the assertions
          /*

          instance.getOrderById(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerPetstore.Order);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('placeOrder', function() {
        it('should call placeOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for placeOrder call and complete the assertions
          /*

          instance.placeOrder(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerPetstore.Order);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
