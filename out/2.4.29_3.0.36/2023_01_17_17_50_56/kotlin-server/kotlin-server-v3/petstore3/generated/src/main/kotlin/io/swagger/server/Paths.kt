/**
* Swagger Petstore - OpenAPI 3.0
* This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
*
* OpenAPI spec version: 1.0.5
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param body Create a new pet in the store 
     */
    @Location("/pet") class addPet(val body: Pet)

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     */
    @Location("/pet/{petId}") class deletePet(val petId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter (optional, default to available)
     */
    @Location("/pet/findByStatus") class findPetsByStatus(val status: kotlin.String)

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by (optional)
     */
    @Location("/pet/findByTags") class findPetsByTags(val tags: kotlin.Array<kotlin.String>)

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     */
    @Location("/pet/{petId}") class getPetById(val petId: kotlin.Long)

    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param body Update an existent pet in the store 
     */
    @Location("/pet") class updatePet(val body: Pet)

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name Name of pet that needs to be updated (optional)
     * @param status Status of pet that needs to be updated (optional)
     */
    @Location("/pet/{petId}") class updatePetWithForm(val petId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param body  (optional)
     * @param additionalMetadata Additional Metadata (optional)
     */
    @Location("/pet/{petId}/uploadImage") class uploadFile(val petId: kotlin.Long, val body: Object, val additionalMetadata: kotlin.String)

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted 
     */
    @Location("/store/order/{orderId}") class deleteOrder(val orderId: kotlin.Long)

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    @Location("/store/inventory") class getInventory()

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of order that needs to be fetched 
     */
    @Location("/store/order/{orderId}") class getOrderById(val orderId: kotlin.Long)

    /**
     * Place an order for a pet
     * Place a new order in the store
     * @param body  (optional)
     */
    @Location("/store/order") class placeOrder(val body: Order)

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object (optional)
     */
    @Location("/user") class createUser(val body: User)

    /**
     * Creates list of users with given input array
     * Creates list of users with given input array
     * @param body  (optional)
     */
    @Location("/user/createWithList") class createUsersWithListInput(val body: kotlin.Array<User>)

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     */
    @Location("/user/{username}") class deleteUser(val username: kotlin.String)

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  
     */
    @Location("/user/{username}") class getUserByName(val username: kotlin.String)

    /**
     * Logs user into the system
     * 
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     */
    @Location("/user/login") class loginUser(val username: kotlin.String, val password: kotlin.String)

    /**
     * Logs out current logged in user session
     * 
     */
    @Location("/user/logout") class logoutUser()

    /**
     * Update user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted 
     * @param body Update an existent user in the store (optional)
     */
    @Location("/user/{username}") class updateUser(val username: kotlin.String, val body: User)

}
