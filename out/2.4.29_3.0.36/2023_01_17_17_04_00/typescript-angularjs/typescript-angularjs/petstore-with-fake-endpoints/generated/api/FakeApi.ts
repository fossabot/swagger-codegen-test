/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class FakeApi {
    protected basePath = 'http://petstore.swagger.io:80/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Test serialization of outer boolean types
     * @param body Input boolean as post body
     */
    public fakeOuterBooleanSerialize (body?: models.OuterBoolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OuterBoolean> {
        const localVarPath = this.basePath + '/fake/outer/boolean';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Test serialization of object with outer number type
     * @param body Input composite as post body
     */
    public fakeOuterCompositeSerialize (body?: models.OuterComposite, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OuterComposite> {
        const localVarPath = this.basePath + '/fake/outer/composite';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Test serialization of outer number types
     * @param body Input number as post body
     */
    public fakeOuterNumberSerialize (body?: models.OuterNumber, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OuterNumber> {
        const localVarPath = this.basePath + '/fake/outer/number';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Test serialization of outer string types
     * @param body Input string as post body
     */
    public fakeOuterStringSerialize (body?: models.OuterString, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OuterString> {
        const localVarPath = this.basePath + '/fake/outer/string';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param body 
     * @param query 
     */
    public testBodyWithQueryParams (body: models.User, query: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fake/body-with-query-params';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling testBodyWithQueryParams.');
        }

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling testBodyWithQueryParams.');
        }

        if (query !== undefined) {
            queryParameters['query'] = query;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * To test \"client\" model
     * @summary To test \"client\" model
     * @param body client model
     */
    public testClientModel (body: models.Client, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Client> {
        const localVarPath = this.basePath + '/fake';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling testClientModel.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @param number None
     * @param _double None
     * @param patternWithoutDelimiter None
     * @param _byte None
     * @param integer None
     * @param int32 None
     * @param int64 None
     * @param _float None
     * @param string None
     * @param binary None
     * @param date None
     * @param dateTime None
     * @param password None
     * @param callback None
     */
    public testEndpointParameters (number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, string?: string, binary?: string, date?: string, dateTime?: Date, password?: string, callback?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fake';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

        // verify required parameter 'number' is not null or undefined
        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling testEndpointParameters.');
        }

        // verify required parameter '_double' is not null or undefined
        if (_double === null || _double === undefined) {
            throw new Error('Required parameter _double was null or undefined when calling testEndpointParameters.');
        }

        // verify required parameter 'patternWithoutDelimiter' is not null or undefined
        if (patternWithoutDelimiter === null || patternWithoutDelimiter === undefined) {
            throw new Error('Required parameter patternWithoutDelimiter was null or undefined when calling testEndpointParameters.');
        }

        // verify required parameter '_byte' is not null or undefined
        if (_byte === null || _byte === undefined) {
            throw new Error('Required parameter _byte was null or undefined when calling testEndpointParameters.');
        }

        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

        formParams['integer'] = integer;

        formParams['int32'] = int32;

        formParams['int64'] = int64;

        formParams['number'] = number;

        formParams['float'] = _float;

        formParams['double'] = _double;

        formParams['string'] = string;

        formParams['pattern_without_delimiter'] = patternWithoutDelimiter;

        formParams['byte'] = _byte;

        formParams['binary'] = binary;

        formParams['date'] = date;

        formParams['dateTime'] = dateTime;

        formParams['password'] = password;

        formParams['callback'] = callback;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * To test enum parameters
     * @summary To test enum parameters
     * @param enumFormStringArray Form parameter enum test (string array)
     * @param enumFormString Form parameter enum test (string)
     * @param enumHeaderStringArray Header parameter enum test (string array)
     * @param enumHeaderString Header parameter enum test (string)
     * @param enumQueryStringArray Query parameter enum test (string array)
     * @param enumQueryString Query parameter enum test (string)
     * @param enumQueryInteger Query parameter enum test (double)
     * @param enumQueryDouble Query parameter enum test (double)
     */
    public testEnumParameters (enumFormStringArray?: Array<'>' | '$'>, enumFormString?: models.'_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: models.'_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: models.'_abc' | '-efg' | '(xyz)', enumQueryInteger?: models.1 | -2, enumQueryDouble?: models.1.1 | -1.2, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fake';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

        if (enumQueryStringArray !== undefined) {
            queryParameters['enum_query_string_array'] = enumQueryStringArray;
        }

        if (enumQueryString !== undefined) {
            queryParameters['enum_query_string'] = enumQueryString;
        }

        if (enumQueryInteger !== undefined) {
            queryParameters['enum_query_integer'] = enumQueryInteger;
        }

        headerParams['enum_header_string_array'] = enumHeaderStringArray;

        headerParams['enum_header_string'] = enumHeaderString;

        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

        formParams['enum_form_string_array'] = enumFormStringArray;

        formParams['enum_form_string'] = enumFormString;

        formParams['enum_query_double'] = enumQueryDouble;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary test inline additionalProperties
     * @param param request body
     */
    public testInlineAdditionalProperties (param: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fake/inline-additionalProperties';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'param' is not null or undefined
        if (param === null || param === undefined) {
            throw new Error('Required parameter param was null or undefined when calling testInlineAdditionalProperties.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: param,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary test json serialization of form data
     * @param param field1
     * @param param2 field2
     */
    public testJsonFormData (param: string, param2: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fake/jsonFormData';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

        // verify required parameter 'param' is not null or undefined
        if (param === null || param === undefined) {
            throw new Error('Required parameter param was null or undefined when calling testJsonFormData.');
        }

        // verify required parameter 'param2' is not null or undefined
        if (param2 === null || param2 === undefined) {
            throw new Error('Required parameter param2 was null or undefined when calling testJsonFormData.');
        }

        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

        formParams['param'] = param;

        formParams['param2'] = param2;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
