<?php
/**
 * EnumTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EnumTest model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class EnumTest 
{
        /**
     * @var string|null
     * @SerializedName("enum_string")
     * @Assert\Choice({ "UPPER", "lower", "" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $enumString;

    /**
     * @var string
     * @SerializedName("enum_string_required")
     * @Assert\NotNull()
     * @Assert\Choice({ "UPPER", "lower", "" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $enumStringRequired;

    /**
     * @var int|null
     * @SerializedName("enum_integer")
     * @Assert\Choice({ 1, -1 })
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $enumInteger;

    /**
     * @var double|null
     * @SerializedName("enum_number")
     * @Assert\Choice({ 1.1, -1.2 })
     * @Assert\Type("double")
     * @Type("double")
     */
    protected $enumNumber;

    /**
     * @var Swagger\Server\Model\OuterEnum|null
     * @SerializedName("outerEnum")
     * @Assert\Type("Swagger\Server\Model\OuterEnum")
     * @Type("Swagger\Server\Model\OuterEnum")
     */
    protected $outerEnum;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->enumString = isset($data['enumString']) ? $data['enumString'] : null;
        $this->enumStringRequired = isset($data['enumStringRequired']) ? $data['enumStringRequired'] : null;
        $this->enumInteger = isset($data['enumInteger']) ? $data['enumInteger'] : null;
        $this->enumNumber = isset($data['enumNumber']) ? $data['enumNumber'] : null;
        $this->outerEnum = isset($data['outerEnum']) ? $data['outerEnum'] : null;
    }

    /**
     * Gets enumString.
     *
     * @return string|null
     */
    public function getEnumString()
    {
        return $this->enumString;
    }

    /**
     * Sets enumString.
     *
     * @param string|null $enumString
     *
     * @return $this
     */
    public function setEnumString($enumString = null)
    {
        $this->enumString = $enumString;

        return $this;
    }

    /**
     * Gets enumStringRequired.
     *
     * @return string
     */
    public function getEnumStringRequired()
    {
        return $this->enumStringRequired;
    }

    /**
     * Sets enumStringRequired.
     *
     * @param string $enumStringRequired
     *
     * @return $this
     */
    public function setEnumStringRequired($enumStringRequired)
    {
        $this->enumStringRequired = $enumStringRequired;

        return $this;
    }

    /**
     * Gets enumInteger.
     *
     * @return int|null
     */
    public function getEnumInteger()
    {
        return $this->enumInteger;
    }

    /**
     * Sets enumInteger.
     *
     * @param int|null $enumInteger
     *
     * @return $this
     */
    public function setEnumInteger($enumInteger = null)
    {
        $this->enumInteger = $enumInteger;

        return $this;
    }

    /**
     * Gets enumNumber.
     *
     * @return double|null
     */
    public function getEnumNumber()
    {
        return $this->enumNumber;
    }

    /**
     * Sets enumNumber.
     *
     * @param double|null $enumNumber
     *
     * @return $this
     */
    public function setEnumNumber($enumNumber = null)
    {
        $this->enumNumber = $enumNumber;

        return $this;
    }

    /**
     * Gets outerEnum.
     *
     * @return Swagger\Server\Model\OuterEnum|null
     */
    public function getOuterEnum()
    {
        return $this->outerEnum;
    }

    /**
     * Sets outerEnum.
     *
     * @param Swagger\Server\Model\OuterEnum|null $outerEnum
     *
     * @return $this
     */
    public function setOuterEnum(OuterEnum $outerEnum = null)
    {
        $this->outerEnum = $outerEnum;

        return $this;
    }
}


