/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OuterString,
  User,
  OuterBoolean,
  OuterNumber,
  OuterComposite,
  Client,
} from './models';

/**
 * fakeOuterBooleanSerialize - parameters interface
 */
export interface IFakeOuterBooleanSerializeParams {
  body?: OuterBoolean;
}

/**
 * fakeOuterCompositeSerialize - parameters interface
 */
export interface IFakeOuterCompositeSerializeParams {
  body?: OuterComposite;
}

/**
 * fakeOuterNumberSerialize - parameters interface
 */
export interface IFakeOuterNumberSerializeParams {
  body?: OuterNumber;
}

/**
 * fakeOuterStringSerialize - parameters interface
 */
export interface IFakeOuterStringSerializeParams {
  body?: OuterString;
}

/**
 * testBodyWithQueryParams - parameters interface
 */
export interface ITestBodyWithQueryParamsParams {
  body: User;
  query: string;
}

/**
 * testClientModel - parameters interface
 */
export interface ITestClientModelParams {
  body: Client;
}

/**
 * testEndpointParameters - parameters interface
 */
export interface ITestEndpointParametersParams {
  number: number;
  _double: number;
  patternWithoutDelimiter: string;
  _byte: string;
  integer?: number;
  int32?: number;
  int64?: number;
  _float?: number;
  string?: string;
  binary?: string;
  date?: string;
  dateTime?: Date;
  password?: string;
  callback?: string;
}

/**
 * testEnumParameters - parameters interface
 */
export interface ITestEnumParametersParams {
  enumFormStringArray?: Array<'>' | '$'>;
  enumFormString?: '_abc' | '-efg' | '(xyz)';
  enumHeaderStringArray?: Array<'>' | '$'>;
  enumHeaderString?: '_abc' | '-efg' | '(xyz)';
  enumQueryStringArray?: Array<'>' | '$'>;
  enumQueryString?: '_abc' | '-efg' | '(xyz)';
  enumQueryInteger?: 1 | -2;
  enumQueryDouble?: 1.1 | -1.2;
}

/**
 * testInlineAdditionalProperties - parameters interface
 */
export interface ITestInlineAdditionalPropertiesParams {
  param: any;
}

/**
 * testJsonFormData - parameters interface
 */
export interface ITestJsonFormDataParams {
  param: string;
  param2: string;
}

/**
 * FakeApi - API class
 */
@autoinject()
export class FakeApi extends Api {

  /**
   * Creates a new FakeApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Test serialization of outer boolean types
   * @param params.body Input boolean as post body
   */
  async fakeOuterBooleanSerialize(params: IFakeOuterBooleanSerializeParams): Promise<OuterBoolean> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fake/outer/boolean`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Test serialization of object with outer number type
   * @param params.body Input composite as post body
   */
  async fakeOuterCompositeSerialize(params: IFakeOuterCompositeSerializeParams): Promise<OuterComposite> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fake/outer/composite`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Test serialization of outer number types
   * @param params.body Input number as post body
   */
  async fakeOuterNumberSerialize(params: IFakeOuterNumberSerializeParams): Promise<OuterNumber> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fake/outer/number`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Test serialization of outer string types
   * @param params.body Input string as post body
   */
  async fakeOuterStringSerialize(params: IFakeOuterStringSerializeParams): Promise<OuterString> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fake/outer/string`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.body 
   * @param params.query 
   */
  async testBodyWithQueryParams(params: ITestBodyWithQueryParamsParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('testBodyWithQueryParams', params, 'body');
    this.ensureParamIsSet('testBodyWithQueryParams', params, 'query');

    // Create URL to call
    const url = `${this.basePath}/fake/body-with-query-params`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Set query parameters
      .withParams({ 
        'query': params['query'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * To test \&quot;client\&quot; model
   * To test \&quot;client\&quot; model
   * @param params.body client model
   */
  async testClientModel(params: ITestClientModelParams): Promise<Client> {
    // Verify required parameters are set
    this.ensureParamIsSet('testClientModel', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/fake`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * @param params.number None
   * @param params._double None
   * @param params.patternWithoutDelimiter None
   * @param params._byte None
   * @param params.integer None
   * @param params.int32 None
   * @param params.int64 None
   * @param params._float None
   * @param params.string None
   * @param params.binary None
   * @param params.date None
   * @param params.dateTime None
   * @param params.password None
   * @param params.callback None
   */
  async testEndpointParameters(params: ITestEndpointParametersParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('testEndpointParameters', params, 'number');
    this.ensureParamIsSet('testEndpointParameters', params, '_double');
    this.ensureParamIsSet('testEndpointParameters', params, 'patternWithoutDelimiter');
    this.ensureParamIsSet('testEndpointParameters', params, '_byte');

    // Create URL to call
    const url = `${this.basePath}/fake`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'integer': params['integer'],
        'int32': params['int32'],
        'int64': params['int64'],
        'number': params['number'],
        'float': params['_float'],
        'double': params['_double'],
        'string': params['string'],
        'pattern_without_delimiter': params['patternWithoutDelimiter'],
        'byte': params['_byte'],
        'binary': params['binary'],
        'date': params['date'],
        'dateTime': params['dateTime'],
        'password': params['password'],
        'callback': params['callback'],
      }))

      // Authentication 'http_basic_test' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * To test enum parameters
   * To test enum parameters
   * @param params.enumFormStringArray Form parameter enum test (string array)
   * @param params.enumFormString Form parameter enum test (string)
   * @param params.enumHeaderStringArray Header parameter enum test (string array)
   * @param params.enumHeaderString Header parameter enum test (string)
   * @param params.enumQueryStringArray Query parameter enum test (string array)
   * @param params.enumQueryString Query parameter enum test (string)
   * @param params.enumQueryInteger Query parameter enum test (double)
   * @param params.enumQueryDouble Query parameter enum test (double)
   */
  async testEnumParameters(params: ITestEnumParametersParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/fake`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'enum_query_string_array': params['enumQueryStringArray'],
        'enum_query_string': params['enumQueryString'],
        'enum_query_integer': params['enumQueryInteger'],
      })
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'enum_form_string_array': params['enumFormStringArray'],
        'enum_form_string': params['enumFormString'],
        'enum_query_double': params['enumQueryDouble'],
      }))
      .withHeader('enum_header_string_array', params['enumHeaderStringArray'])      .withHeader('enum_header_string', params['enumHeaderString'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * test inline additionalProperties
   * 
   * @param params.param request body
   */
  async testInlineAdditionalProperties(params: ITestInlineAdditionalPropertiesParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('testInlineAdditionalProperties', params, 'param');

    // Create URL to call
    const url = `${this.basePath}/fake/inline-additionalProperties`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['param'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * test json serialization of form data
   * 
   * @param params.param field1
   * @param params.param2 field2
   */
  async testJsonFormData(params: ITestJsonFormDataParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('testJsonFormData', params, 'param');
    this.ensureParamIsSet('testJsonFormData', params, 'param2');

    // Create URL to call
    const url = `${this.basePath}/fake/jsonFormData`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'param': params['param'],
        'param2': params['param2'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

