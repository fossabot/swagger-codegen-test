/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Animal

import io.swagger.client.infrastructure.*
import org.threeten.bp.LocalDateTime

class AnimalApi(basePath: kotlin.String = "http://petstore.swagger.io:80/v2") : ApiClient(basePath) {

    /**
     * Add a new animal to the store
     * 
     * @param body Animal object that needs to be added to the store 
     * @return void
     */
    fun addAnimal(body: Animal): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/animal"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a animal
     * 
     * @param animalId Animal id to delete 
     * @param apiKey  (optional)
     * @return void
     */
    fun deleteAnimal(animalId: kotlin.Long, apiKey: kotlin.String? = null): Unit {
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        apiKey?.apply {
            localVariableHeaders["api_key"] = this.toString()
        }
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/animal/{animalId}".replace("{" + "animalId" + "}", "$animalId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find animal by ID
     * Returns a single animal
     * @param animalId ID of pet to return 
     * @return Animal
     */
    @Suppress("UNCHECKED_CAST")
    fun getAnimalById(animalId: kotlin.Long): Animal {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/animal/{animalId}".replace("{" + "animalId" + "}", "$animalId")
        )
        val response = request<Animal>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Animal
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update an existing animal
     * 
     * @param body Animal object that needs to be added. 
     * @return void
     */
    fun updateAnimal(body: Animal): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/animal"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates a animal
     * 
     * @param animalId ID of animal that needs to be updated 
     * @param name  (optional)
     * @param status  (optional)
     * @return void
     */
    fun updateAnimalWithForm(animalId: kotlin.Long, name: kotlin.String? = null, status: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = mapOf("name" to "$name", "status" to "$status")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/animal/{animalId}".replace("{" + "animalId" + "}", "$animalId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
