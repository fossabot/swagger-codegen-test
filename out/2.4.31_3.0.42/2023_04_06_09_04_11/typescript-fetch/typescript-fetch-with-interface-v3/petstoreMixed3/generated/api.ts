/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://raw.githubusercontent.com/v3".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AdditionalPropertiesClass
 */
export interface AdditionalPropertiesClass {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AdditionalPropertiesClass
     */
    mapProperty?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof AdditionalPropertiesClass
     */
    mapOfMapProperty?: { [key: string]: { [key: string]: string; }; };
}
/**
 * 
 * @export
 */
export type AllPetsResponse = Array<Dog | Cat>
/**
 * 
 * @export
 * @interface Animal
 */
export interface Animal {
    /**
     * 
     * @type {string}
     * @memberof Animal
     */
    className: string;
    /**
     * 
     * @type {string}
     * @memberof Animal
     */
    color?: string;
}
/**
 * 
 * @export
 * @interface AnimalAnimalIdBody
 */
export interface AnimalAnimalIdBody {
    /**
     * Updated name of the animal
     * @type {string}
     * @memberof AnimalAnimalIdBody
     */
    name?: string;
    /**
     * Updated status of the animal
     * @type {string}
     * @memberof AnimalAnimalIdBody
     */
    status?: string;
}
/**
 * 
 * @export
 */
export type AnimalFarm = Array<Animal>
/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface ArrayOfArrayOfNumberOnly
 */
export interface ArrayOfArrayOfNumberOnly {
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof ArrayOfArrayOfNumberOnly
     */
    arrayArrayNumber?: Array<Array<number>>;
}
/**
 * 
 * @export
 * @interface ArrayOfNumberOnly
 */
export interface ArrayOfNumberOnly {
    /**
     * 
     * @type {Array<number>}
     * @memberof ArrayOfNumberOnly
     */
    arrayNumber?: Array<number>;
}
/**
 * 
 * @export
 * @interface ArrayTest
 */
export interface ArrayTest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ArrayTest
     */
    arrayOfString?: Array<string>;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof ArrayTest
     */
    arrayArrayOfInteger?: Array<Array<number>>;
    /**
     * 
     * @type {Array<Array<ReadOnlyFirst>>}
     * @memberof ArrayTest
     */
    arrayArrayOfModel?: Array<Array<ReadOnlyFirst>>;
}
/**
 * 
 * @export
 * @interface Capitalization
 */
export interface Capitalization {
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    smallCamel?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    capitalCamel?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    smallSnake?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    capitalSnake?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    sCAETHFlowPoints?: string;
    /**
     * Name of the pet 
     * @type {string}
     * @memberof Capitalization
     */
    ATT_NAME?: string;
}
/**
 * 
 * @export
 * @interface Cat
 */
export interface Cat extends Animal {
    /**
     * 
     * @type {boolean}
     * @memberof Cat
     */
    declawed?: boolean;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name?: string;
}
/**
 * Model for testing model with \"_class\" property
 * @export
 * @interface ClassModel
 */
export interface ClassModel {
    /**
     * 
     * @type {string}
     * @memberof ClassModel
     */
    _class?: string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    client?: string;
}
/**
 * 
 * @export
 * @interface Dog
 */
export interface Dog extends Animal {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    breed?: string;
}
/**
 * 
 * @export
 * @interface DogDogIdBody
 */
export interface DogDogIdBody {
    /**
     * Updated name of the dog
     * @type {string}
     * @memberof DogDogIdBody
     */
    name?: string;
    /**
     * Updated status of the dog
     * @type {string}
     * @memberof DogDogIdBody
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface EnumArrays
 */
export interface EnumArrays {
    /**
     * 
     * @type {string}
     * @memberof EnumArrays
     */
    justSymbol?: EnumArrays.JustSymbolEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof EnumArrays
     */
    arrayEnum?: Array<EnumArrays.ArrayEnumEnum>;
}

/**
 * @export
 * @namespace EnumArrays
 */
export namespace EnumArrays {
    /**
     * @export
     * @enum {string}
     */
    export enum JustSymbolEnum {
        GreaterThanOrEqualTo = <any> '>=',
        Dollar = <any> '$'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ArrayEnumEnum {
        Fish = <any> 'fish',
        Crab = <any> 'crab'
    }
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EnumClass {
    Abc = <any> '_abc',
    Efg = <any> '-efg',
    Xyz = <any> '(xyz)'
}
/**
 * 
 * @export
 * @interface EnumFormBody
 */
export interface EnumFormBody {
    /**
     * Form parameter enum test (string array)
     * @type {Array<string>}
     * @memberof EnumFormBody
     */
    enumFormStringArray?: Array<EnumFormBody.EnumFormStringArrayEnum>;
    /**
     * Form parameter enum test (string)
     * @type {string}
     * @memberof EnumFormBody
     */
    enumFormString?: EnumFormBody.EnumFormStringEnum;
    /**
     * Query parameter enum test (double)
     * @type {number}
     * @memberof EnumFormBody
     */
    enumQueryDouble?: EnumFormBody.EnumQueryDoubleEnum;
}

/**
 * @export
 * @namespace EnumFormBody
 */
export namespace EnumFormBody {
    /**
     * @export
     * @enum {string}
     */
    export enum EnumFormStringArrayEnum {
        GreaterThan = <any> '>',
        Dollar = <any> '$'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum EnumFormStringEnum {
        Abc = <any> '_abc',
        Efg = <any> '-efg',
        Xyz = <any> '(xyz)'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum EnumQueryDoubleEnum {
        NUMBER_1_DOT_1 = <any> 1.1,
        NUMBER_MINUS_1_DOT_2 = <any> -1.2
    }
}
/**
 * 
 * @export
 * @interface EnumTest
 */
export interface EnumTest {
    /**
     * 
     * @type {string}
     * @memberof EnumTest
     */
    enumString?: EnumTest.EnumStringEnum;
    /**
     * 
     * @type {number}
     * @memberof EnumTest
     */
    enumInteger?: EnumTest.EnumIntegerEnum;
    /**
     * 
     * @type {number}
     * @memberof EnumTest
     */
    enumNumber?: EnumTest.EnumNumberEnum;
    /**
     * 
     * @type {OuterEnum}
     * @memberof EnumTest
     */
    outerEnum?: OuterEnum;
}

/**
 * @export
 * @namespace EnumTest
 */
export namespace EnumTest {
    /**
     * @export
     * @enum {string}
     */
    export enum EnumStringEnum {
        UPPER = <any> 'UPPER',
        Lower = <any> 'lower',
        Empty = <any> ''
    }
    /**
     * @export
     * @enum {string}
     */
    export enum EnumIntegerEnum {
        NUMBER_1 = <any> 1,
        NUMBER_MINUS_1 = <any> -1
    }
    /**
     * @export
     * @enum {string}
     */
    export enum EnumNumberEnum {
        NUMBER_1_DOT_1 = <any> 1.1,
        NUMBER_MINUS_1_DOT_2 = <any> -1.2
    }
}
/**
 * 
 * @export
 * @interface FakeBody
 */
export interface FakeBody {
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    integer?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    int32?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    int64?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    number: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    _float?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody
     */
    _double: number;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    string?: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    patternWithoutDelimiter: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    _byte: string;
    /**
     * None
     * @type {Blob}
     * @memberof FakeBody
     */
    binary?: Blob;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    date?: string;
    /**
     * None
     * @type {Date}
     * @memberof FakeBody
     */
    dateTime?: Date;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    password?: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody
     */
    callback?: string;
}
/**
 * 
 * @export
 * @interface FakeBody1
 */
export interface FakeBody1 {
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    integer?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    int32?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    int64?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    number: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    _float?: number;
    /**
     * None
     * @type {number}
     * @memberof FakeBody1
     */
    _double: number;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    string?: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    patternWithoutDelimiter: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    _byte: string;
    /**
     * None
     * @type {Blob}
     * @memberof FakeBody1
     */
    binary?: Blob;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    date?: string;
    /**
     * None
     * @type {Date}
     * @memberof FakeBody1
     */
    dateTime?: Date;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    password?: string;
    /**
     * None
     * @type {string}
     * @memberof FakeBody1
     */
    callback?: string;
}
/**
 * 
 * @export
 * @interface FakeJsonFormDataBody
 */
export interface FakeJsonFormDataBody {
    /**
     * field1
     * @type {string}
     * @memberof FakeJsonFormDataBody
     */
    param: string;
    /**
     * field2
     * @type {string}
     * @memberof FakeJsonFormDataBody
     */
    param2: string;
}
/**
 * 
 * @export
 * @interface FormatTest
 */
export interface FormatTest {
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    integer?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    int32?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    int64?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    number: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    _float?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    _double?: number;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    string?: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    _byte: string;
    /**
     * 
     * @type {Blob}
     * @memberof FormatTest
     */
    binary?: Blob;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    date: string;
    /**
     * 
     * @type {Date}
     * @memberof FormatTest
     */
    dateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface HasOnlyReadOnly
 */
export interface HasOnlyReadOnly {
    /**
     * 
     * @type {string}
     * @memberof HasOnlyReadOnly
     */
    bar?: string;
    /**
     * 
     * @type {string}
     * @memberof HasOnlyReadOnly
     */
    foo?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Macaw | Parakeet>}
     * @memberof InlineResponse200
     */
    parrots?: Array<Macaw | Parakeet>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {string}
     * @memberof List
     */
    _123List?: string;
}
/**
 * 
 * @export
 * @interface Macaw
 */
export interface Macaw {
    /**
     * 
     * @type {string}
     * @memberof Macaw
     */
    color?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Macaw
     */
    singer?: boolean;
}
/**
 * 
 * @export
 * @interface MapTest
 */
export interface MapTest {
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof MapTest
     */
    mapMapOfString?: { [key: string]: { [key: string]: string; }; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MapTest
     */
    mapOfEnumString?: { [key: string]: string; };
}

/**
 * @export
 * @namespace MapTest
 */
export namespace MapTest {
    /**
     * @export
     * @enum {string}
     */
    export enum MapOfEnumStringEnum {
        UPPER = <any> 'UPPER',
        Lower = <any> 'lower'
    }
}
/**
 * 
 * @export
 * @interface MixedPropertiesAndAdditionalPropertiesClass
 */
export interface MixedPropertiesAndAdditionalPropertiesClass {
    /**
     * 
     * @type {string}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    uuid?: string;
    /**
     * 
     * @type {Date}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    dateTime?: Date;
    /**
     * 
     * @type {{ [key: string]: Animal; }}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    map?: { [key: string]: Animal; };
}
/**
 * Model for testing model name starting with number
 * @export
 * @interface Model200Response
 */
export interface Model200Response {
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    name?: number;
    /**
     * 
     * @type {string}
     * @memberof Model200Response
     */
    _class?: string;
}
/**
 * Model for testing reserved words
 * @export
 * @interface ModelReturn
 */
export interface ModelReturn {
    /**
     * 
     * @type {number}
     * @memberof ModelReturn
     */
    _return?: number;
}
/**
 * Model for testing model name same as property name
 * @export
 * @interface Name
 */
export interface Name {
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    name: number;
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    snakeCase?: number;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    property?: string;
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    _123Number?: number;
}
/**
 * 
 * @export
 * @interface NullableEnumModel
 */
export interface NullableEnumModel {
    /**
     * 
     * @type {string}
     * @memberof NullableEnumModel
     */
    enumProp?: NullableEnumModel.EnumPropEnum;
}

/**
 * @export
 * @namespace NullableEnumModel
 */
export namespace NullableEnumModel {
    /**
     * @export
     * @enum {string}
     */
    export enum EnumPropEnum {
        A = <any> 'a',
        B = <any> 'b',
        Null = <any> 'null'
    }
}
/**
 * 
 * @export
 * @interface NumberOnly
 */
export interface NumberOnly {
    /**
     * 
     * @type {number}
     * @memberof NumberOnly
     */
    justNumber?: number;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    petId?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    quantity?: number;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    shipDate?: Date;
    /**
     * Order Status
     * @type {string}
     * @memberof Order
     */
    status?: Order.StatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    complete?: boolean;
}

/**
 * @export
 * @namespace Order
 */
export namespace Order {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Placed = <any> 'placed',
        Approved = <any> 'approved',
        Delivered = <any> 'delivered'
    }
}
/**
 * 
 * @export
 */
export type OuterBoolean = boolean
/**
 * 
 * @export
 * @interface OuterComposite
 */
export interface OuterComposite {
    /**
     * 
     * @type {OuterNumber}
     * @memberof OuterComposite
     */
    myNumber?: OuterNumber;
    /**
     * 
     * @type {OuterString}
     * @memberof OuterComposite
     */
    myString?: OuterString;
    /**
     * 
     * @type {OuterBoolean}
     * @memberof OuterComposite
     */
    myBoolean?: OuterBoolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum OuterEnum {
    Placed = <any> 'placed',
    Approved = <any> 'approved',
    Delivered = <any> 'delivered'
}
/**
 * 
 * @export
 */
export type OuterNumber = number
/**
 * 
 * @export
 */
export type OuterString = string
/**
 * 
 * @export
 * @interface Parakeet
 */
export interface Parakeet {
    /**
     * 
     * @type {string}
     * @memberof Parakeet
     */
    color?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Parakeet
     */
    soundRepeater?: boolean;
}
/**
 * 
 * @export
 * @interface ParrotBody
 */
export interface ParrotBody {
    /**
     * 
     * @type {Array<Macaw | Parakeet>}
     * @memberof ParrotBody
     */
    parrots?: Array<Macaw | Parakeet>;
}
/**
 * 
 * @export
 * @interface ParrotBody1
 */
export interface ParrotBody1 {
}
/**
 * 
 * @export
 * @interface PartFour
 */
export interface PartFour {
    /**
     * 
     * @type {string}
     * @memberof PartFour
     */
    otherIdPart?: string;
}
/**
 * 
 * @export
 * @interface PartMaster
 */
export interface PartMaster {
    /**
     * 
     * @type {PartOne | PartTwo}
     * @memberof PartMaster
     */
    destination?: PartOne | PartTwo;
    /**
     * 
     * @type {PartThree | PartFour}
     * @memberof PartMaster
     */
    origin?: PartThree | PartFour;
}
/**
 * 
 * @export
 * @interface PartOne
 */
export interface PartOne {
    /**
     * A test description
     * @type {string}
     * @memberof PartOne
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface PartThree
 */
export interface PartThree {
    /**
     * 
     * @type {string}
     * @memberof PartThree
     */
    otherId?: string;
}
/**
 * 
 * @export
 * @interface PartTwo
 */
export interface PartTwo {
    /**
     * 
     * @type {string}
     * @memberof PartTwo
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id?: number;
    /**
     * 
     * @type {Category}
     * @memberof Pet
     */
    category?: Category;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pet
     */
    photoUrls: Array<string>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Pet
     */
    tags?: Array<Tag>;
    /**
     * pet status in the store
     * @type {string}
     * @memberof Pet
     */
    status?: Pet.StatusEnum;
}

/**
 * @export
 * @namespace Pet
 */
export namespace Pet {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Available = <any> 'available',
        Pending = <any> 'pending',
        Sold = <any> 'sold'
    }
}
/**
 * 
 * @export
 * @interface PetIdUploadImageBody
 */
export interface PetIdUploadImageBody {
    /**
     * Additional data to pass to server
     * @type {string}
     * @memberof PetIdUploadImageBody
     */
    additionalMetadata?: string;
    /**
     * file to upload
     * @type {Blob}
     * @memberof PetIdUploadImageBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface PetPetIdBody
 */
export interface PetPetIdBody {
    /**
     * Updated name of the pet
     * @type {string}
     * @memberof PetPetIdBody
     */
    name?: string;
    /**
     * Updated status of the pet
     * @type {string}
     * @memberof PetPetIdBody
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface Pup
 */
export interface Pup {
    /**
     * 
     * @type {number}
     * @memberof Pup
     */
    id?: number;
    /**
     * 
     * @type {Category}
     * @memberof Pup
     */
    category2?: Category;
    /**
     * 
     * @type {Array<Pet>}
     * @memberof Pup
     */
    pets?: Array<Pet>;
}
/**
 * 
 * @export
 * @interface ReadOnlyFirst
 */
export interface ReadOnlyFirst {
    /**
     * 
     * @type {string}
     * @memberof ReadOnlyFirst
     */
    bar?: string;
    /**
     * 
     * @type {string}
     * @memberof ReadOnlyFirst
     */
    baz?: string;
}
/**
 * 
 * @export
 * @interface SinglePetResponse
 */
export interface SinglePetResponse {
    /**
     * 
     * @type {Dog | Cat}
     * @memberof SinglePetResponse
     */
    pet?: Dog | Cat;
}
/**
 * 
 * @export
 * @interface SpecialModelName
 */
export interface SpecialModelName {
    /**
     * 
     * @type {number}
     * @memberof SpecialModelName
     */
    specialPropertyName?: number;
}
/**
 * 
 * @export
 * @interface SubCategory
 */
export interface SubCategory {
    /**
     * 
     * @type {Category & any}
     * @memberof SubCategory
     */
    category?: Category & any;
    /**
     * 
     * @type {Category}
     * @memberof SubCategory
     */
    category2?: Category;
    /**
     * 
     * @type {Array<Pet>}
     * @memberof SubCategory
     */
    pets?: Array<Pet>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * User Status
     * @type {number}
     * @memberof User
     */
    userStatus?: number;
}
/**
 * 
 * @export
 * @interface UserWrapper
 */
export interface UserWrapper {
    /**
     * 
     * @type {Users}
     * @memberof UserWrapper
     */
    users?: Users;
}
/**
 * 
 * @export
 */
export type Users = Array<User>
/**
 * Business Term: Scheme Member Definition: Information about a Member of the Scheme. Purpose: To have enough information to be able to produce a Statement of Account indicating premium due.
 * @export
 * @interface ValMemberChoice1
 */
export interface ValMemberChoice1 {
    /**
     * Business Term: Date Of Birth Definition: The date of birth of the member. Purpose: To be able to uniquely identify a member within a scheme.
     * @type {string}
     * @memberof ValMemberChoice1
     */
    valDateOfBirth: string;
    /**
     * Business Term: Leaving Date Definition: The date the member left/is due to leave the scheme. Purpose: To identify those members that have left or are due to leave the scheme. To be able to calculate the benefit insured/premium payable in respect of the member/category.
     * @type {string}
     * @memberof ValMemberChoice1
     */
    valLeavingDate?: string;
}
/**
 * Business Term: Scheme Member Definition: Information about a Member of the Scheme. Purpose: To have enough information to be able to produce a Statement of Account indicating premium due.
 * @export
 * @interface ValMemberChoice2
 */
export interface ValMemberChoice2 {
    /**
     * Business Term: Leaving Date Definition: The date the member left/is due to leave the scheme. Purpose: To identify those members that have left or are due to leave the scheme. To be able to calculate the benefit insured/premium payable in respect of the member/category.
     * @type {string}
     * @memberof ValMemberChoice2
     */
    valLeavingDate?: string;
}
/**
 * Business Term: Scheme Members Definition: Information about the Members of the Scheme. Purpose: To have enough information to be able to produce a Statement of Account indicating premium due.
 * @export
 * @interface ValMembers
 */
export interface ValMembers {
    /**
     * Business Term: Scheme Member Definition: Information about a Member of the Scheme. Purpose: To have enough information to be able to produce a Statement of Account indicating premium due.
     * @type {Array<ValMemberChoice1 | ValMemberChoice2>}
     * @memberof ValMembers
     */
    valMember: Array<ValMemberChoice1 | ValMemberChoice2>;
}
/**
 * AnimalApi - fetch parameter creator
 * @export
 */
export const AnimalApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new animal to the store
         * @param {Animal} body Animal object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnimal(body: Animal, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addAnimal.');
            }
            const localVarPath = `/animal`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Animal" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a animal
         * @param {number} animalId Animal id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnimal(animalId: number, apiKey?: string, options: any = {}): FetchArgs {
            // verify required parameter 'animalId' is not null or undefined
            if (animalId === null || animalId === undefined) {
                throw new RequiredError('animalId','Required parameter animalId was null or undefined when calling deleteAnimal.');
            }
            const localVarPath = `/animal/{animalId}`
                .replace(`{${"animalId"}}`, encodeURIComponent(String(animalId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single animal
         * @summary Find animal by ID
         * @param {number} animalId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnimalById(animalId: number, options: any = {}): FetchArgs {
            // verify required parameter 'animalId' is not null or undefined
            if (animalId === null || animalId === undefined) {
                throw new RequiredError('animalId','Required parameter animalId was null or undefined when calling getAnimalById.');
            }
            const localVarPath = `/animal/{animalId}`
                .replace(`{${"animalId"}}`, encodeURIComponent(String(animalId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing animal
         * @param {Animal} body Animal object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimal(body: Animal, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAnimal.');
            }
            const localVarPath = `/animal`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Animal" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a animal
         * @param {number} animalId ID of animal that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimalWithForm(animalId: number, name?: string, status?: string, options: any = {}): FetchArgs {
            // verify required parameter 'animalId' is not null or undefined
            if (animalId === null || animalId === undefined) {
                throw new RequiredError('animalId','Required parameter animalId was null or undefined when calling updateAnimalWithForm.');
            }
            const localVarPath = `/animal/{animalId}`
                .replace(`{${"animalId"}}`, encodeURIComponent(String(animalId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnimalApi - functional programming interface
 * @export
 */
export const AnimalApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new animal to the store
         * @param {Animal} body Animal object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnimal(body: Animal, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AnimalApiFetchParamCreator(configuration).addAnimal(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a animal
         * @param {number} animalId Animal id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnimal(animalId: number, apiKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AnimalApiFetchParamCreator(configuration).deleteAnimal(animalId, apiKey, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single animal
         * @summary Find animal by ID
         * @param {number} animalId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnimalById(animalId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Animal> {
            const localVarFetchArgs = AnimalApiFetchParamCreator(configuration).getAnimalById(animalId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an existing animal
         * @param {Animal} body Animal object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimal(body: Animal, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AnimalApiFetchParamCreator(configuration).updateAnimal(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a animal
         * @param {number} animalId ID of animal that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimalWithForm(animalId: number, name?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AnimalApiFetchParamCreator(configuration).updateAnimalWithForm(animalId, name, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AnimalApi - factory interface
 * @export
 */
export const AnimalApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new animal to the store
         * @param {Animal} body Animal object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnimal(body: Animal, options?: any) {
            return AnimalApiFp(configuration).addAnimal(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a animal
         * @param {number} animalId Animal id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnimal(animalId: number, apiKey?: string, options?: any) {
            return AnimalApiFp(configuration).deleteAnimal(animalId, apiKey, options)(fetch, basePath);
        },
        /**
         * Returns a single animal
         * @summary Find animal by ID
         * @param {number} animalId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnimalById(animalId: number, options?: any) {
            return AnimalApiFp(configuration).getAnimalById(animalId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an existing animal
         * @param {Animal} body Animal object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimal(body: Animal, options?: any) {
            return AnimalApiFp(configuration).updateAnimal(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a animal
         * @param {number} animalId ID of animal that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnimalWithForm(animalId: number, name?: string, status?: string, options?: any) {
            return AnimalApiFp(configuration).updateAnimalWithForm(animalId, name, status, options)(fetch, basePath);
        },
    };
};

/**
 * AnimalApi - interface
 * @export
 * @interface AnimalApi
 */
export interface AnimalApiInterface {
    /**
     * 
     * @summary Add a new animal to the store
     * @param {Animal} body Animal object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApiInterface
     */
    addAnimal(body: Animal, options?: any): Promise<{}>;

    /**
     * 
     * @summary Deletes a animal
     * @param {number} animalId Animal id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApiInterface
     */
    deleteAnimal(animalId: number, apiKey?: string, options?: any): Promise<{}>;

    /**
     * Returns a single animal
     * @summary Find animal by ID
     * @param {number} animalId ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApiInterface
     */
    getAnimalById(animalId: number, options?: any): Promise<Animal>;

    /**
     * 
     * @summary Update an existing animal
     * @param {Animal} body Animal object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApiInterface
     */
    updateAnimal(body: Animal, options?: any): Promise<{}>;

    /**
     * 
     * @summary Updates a animal
     * @param {number} animalId ID of animal that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApiInterface
     */
    updateAnimalWithForm(animalId: number, name?: string, status?: string, options?: any): Promise<{}>;

}

/**
 * AnimalApi - object-oriented interface
 * @export
 * @class AnimalApi
 * @extends {BaseAPI}
 */
export class AnimalApi extends BaseAPI implements AnimalApiInterface {
    /**
     * 
     * @summary Add a new animal to the store
     * @param {Animal} body Animal object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApi
     */
    public addAnimal(body: Animal, options?: any) {
        return AnimalApiFp(this.configuration).addAnimal(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a animal
     * @param {number} animalId Animal id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApi
     */
    public deleteAnimal(animalId: number, apiKey?: string, options?: any) {
        return AnimalApiFp(this.configuration).deleteAnimal(animalId, apiKey, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single animal
     * @summary Find animal by ID
     * @param {number} animalId ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApi
     */
    public getAnimalById(animalId: number, options?: any) {
        return AnimalApiFp(this.configuration).getAnimalById(animalId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an existing animal
     * @param {Animal} body Animal object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApi
     */
    public updateAnimal(body: Animal, options?: any) {
        return AnimalApiFp(this.configuration).updateAnimal(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a animal
     * @param {number} animalId ID of animal that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimalApi
     */
    public updateAnimalWithForm(animalId: number, name?: string, status?: string, options?: any) {
        return AnimalApiFp(this.configuration).updateAnimalWithForm(animalId, name, status, options)(this.fetch, this.basePath);
    }

}
/**
 * AnotherFakeApi - fetch parameter creator
 * @export
 */
export const AnotherFakeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To test special tags
         * @summary To test special tags
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSpecialTags(body: Client, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testSpecialTags.');
            }
            const localVarPath = `/another-fake/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Client" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnotherFakeApi - functional programming interface
 * @export
 */
export const AnotherFakeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * To test special tags
         * @summary To test special tags
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSpecialTags(body: Client, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Client> {
            const localVarFetchArgs = AnotherFakeApiFetchParamCreator(configuration).testSpecialTags(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AnotherFakeApi - factory interface
 * @export
 */
export const AnotherFakeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * To test special tags
         * @summary To test special tags
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSpecialTags(body: Client, options?: any) {
            return AnotherFakeApiFp(configuration).testSpecialTags(body, options)(fetch, basePath);
        },
    };
};

/**
 * AnotherFakeApi - interface
 * @export
 * @interface AnotherFakeApi
 */
export interface AnotherFakeApiInterface {
    /**
     * To test special tags
     * @summary To test special tags
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnotherFakeApiInterface
     */
    testSpecialTags(body: Client, options?: any): Promise<Client>;

}

/**
 * AnotherFakeApi - object-oriented interface
 * @export
 * @class AnotherFakeApi
 * @extends {BaseAPI}
 */
export class AnotherFakeApi extends BaseAPI implements AnotherFakeApiInterface {
    /**
     * To test special tags
     * @summary To test special tags
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnotherFakeApi
     */
    public testSpecialTags(body: Client, options?: any) {
        return AnotherFakeApiFp(this.configuration).testSpecialTags(body, options)(this.fetch, this.basePath);
    }

}
/**
 * DogApi - fetch parameter creator
 * @export
 */
export const DogApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new dog to the store
         * @param {Dog} body Dog object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDog(body: Dog, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addDog.');
            }
            const localVarPath = `/dog`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_bearer_test required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Dog" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a dog
         * @param {number} dogId Dog id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDog(dogId: number, apiKey?: string, options: any = {}): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling deleteDog.');
            }
            const localVarPath = `/dog/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_bearer_test required

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single dog
         * @summary Find dog by ID
         * @param {number} dogId ID of dog to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDogById(dogId: number, options: any = {}): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling getDogById.');
            }
            const localVarPath = `/dog/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_bearer_test required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing dog
         * @param {Dog} body Dog object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDog(body: Dog, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDog.');
            }
            const localVarPath = `/dog`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_bearer_test required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Dog" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a dog
         * @param {number} dogId ID of dog that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDogWithForm(dogId: number, name?: string, status?: string, options: any = {}): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling updateDogWithForm.');
            }
            const localVarPath = `/dog/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication http_bearer_test required

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DogApi - functional programming interface
 * @export
 */
export const DogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new dog to the store
         * @param {Dog} body Dog object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDog(body: Dog, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DogApiFetchParamCreator(configuration).addDog(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a dog
         * @param {number} dogId Dog id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDog(dogId: number, apiKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DogApiFetchParamCreator(configuration).deleteDog(dogId, apiKey, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single dog
         * @summary Find dog by ID
         * @param {number} dogId ID of dog to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDogById(dogId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Dog> {
            const localVarFetchArgs = DogApiFetchParamCreator(configuration).getDogById(dogId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an existing dog
         * @param {Dog} body Dog object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDog(body: Dog, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DogApiFetchParamCreator(configuration).updateDog(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a dog
         * @param {number} dogId ID of dog that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDogWithForm(dogId: number, name?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DogApiFetchParamCreator(configuration).updateDogWithForm(dogId, name, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DogApi - factory interface
 * @export
 */
export const DogApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new dog to the store
         * @param {Dog} body Dog object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDog(body: Dog, options?: any) {
            return DogApiFp(configuration).addDog(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a dog
         * @param {number} dogId Dog id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDog(dogId: number, apiKey?: string, options?: any) {
            return DogApiFp(configuration).deleteDog(dogId, apiKey, options)(fetch, basePath);
        },
        /**
         * Returns a single dog
         * @summary Find dog by ID
         * @param {number} dogId ID of dog to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDogById(dogId: number, options?: any) {
            return DogApiFp(configuration).getDogById(dogId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an existing dog
         * @param {Dog} body Dog object that needs to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDog(body: Dog, options?: any) {
            return DogApiFp(configuration).updateDog(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a dog
         * @param {number} dogId ID of dog that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDogWithForm(dogId: number, name?: string, status?: string, options?: any) {
            return DogApiFp(configuration).updateDogWithForm(dogId, name, status, options)(fetch, basePath);
        },
    };
};

/**
 * DogApi - interface
 * @export
 * @interface DogApi
 */
export interface DogApiInterface {
    /**
     * 
     * @summary Add a new dog to the store
     * @param {Dog} body Dog object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApiInterface
     */
    addDog(body: Dog, options?: any): Promise<{}>;

    /**
     * 
     * @summary Deletes a dog
     * @param {number} dogId Dog id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApiInterface
     */
    deleteDog(dogId: number, apiKey?: string, options?: any): Promise<{}>;

    /**
     * Returns a single dog
     * @summary Find dog by ID
     * @param {number} dogId ID of dog to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApiInterface
     */
    getDogById(dogId: number, options?: any): Promise<Dog>;

    /**
     * 
     * @summary Update an existing dog
     * @param {Dog} body Dog object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApiInterface
     */
    updateDog(body: Dog, options?: any): Promise<{}>;

    /**
     * 
     * @summary Updates a dog
     * @param {number} dogId ID of dog that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApiInterface
     */
    updateDogWithForm(dogId: number, name?: string, status?: string, options?: any): Promise<{}>;

}

/**
 * DogApi - object-oriented interface
 * @export
 * @class DogApi
 * @extends {BaseAPI}
 */
export class DogApi extends BaseAPI implements DogApiInterface {
    /**
     * 
     * @summary Add a new dog to the store
     * @param {Dog} body Dog object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApi
     */
    public addDog(body: Dog, options?: any) {
        return DogApiFp(this.configuration).addDog(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a dog
     * @param {number} dogId Dog id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApi
     */
    public deleteDog(dogId: number, apiKey?: string, options?: any) {
        return DogApiFp(this.configuration).deleteDog(dogId, apiKey, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single dog
     * @summary Find dog by ID
     * @param {number} dogId ID of dog to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApi
     */
    public getDogById(dogId: number, options?: any) {
        return DogApiFp(this.configuration).getDogById(dogId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an existing dog
     * @param {Dog} body Dog object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApi
     */
    public updateDog(body: Dog, options?: any) {
        return DogApiFp(this.configuration).updateDog(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a dog
     * @param {number} dogId ID of dog that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DogApi
     */
    public updateDogWithForm(dogId: number, name?: string, status?: string, options?: any) {
        return DogApiFp(this.configuration).updateDogWithForm(dogId, name, status, options)(this.fetch, this.basePath);
    }

}
/**
 * FakeApi - fetch parameter creator
 * @export
 */
export const FakeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Test serialization of outer boolean types
         * @param {boolean} [body] Input boolean as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterBooleanSerialize(body?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/fake/outer/boolean`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"boolean" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of object with outer number type
         * @param {OuterComposite} [body] Input composite as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterCompositeSerialize(body?: OuterComposite, options: any = {}): FetchArgs {
            const localVarPath = `/fake/outer/composite`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OuterComposite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of outer number types
         * @param {number} [body] Input number as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterNumberSerialize(body?: number, options: any = {}): FetchArgs {
            const localVarPath = `/fake/outer/number`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"number" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of outer string types
         * @param {string} [body] Input string as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterStringSerialize(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/fake/outer/string`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To test \"client\" model
         * @summary To test \"client\" model
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClientModel(body: Client, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testClientModel.');
            }
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Client" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @param {FakeBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEndpointParameters(body: FakeBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testEndpointParameters.');
            }
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_basic_test required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/xml; charset=utf-8';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FakeBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {Array<string>} [enumHeaderStringArray] Header parameter enum test (string array)
         * @param {string} [enumHeaderString] Header parameter enum test (string)
         * @param {Array<string>} [enumQueryStringArray] Query parameter enum test (string array)
         * @param {string} [enumQueryString] Query parameter enum test (string)
         * @param {number} [enumQueryInteger] Query parameter enum test (double)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumParameters(enumHeaderStringArray?: Array<string>, enumHeaderString?: string, enumQueryStringArray?: Array<string>, enumQueryString?: string, enumQueryInteger?: number, options: any = {}): FetchArgs {
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (enumQueryStringArray) {
                localVarQueryParameter['enum_query_string_array'] = enumQueryStringArray.join(COLLECTION_FORMATS["csv"]);
            }

            if (enumQueryString !== undefined) {
                localVarQueryParameter['enum_query_string'] = enumQueryString;
            }

            if (enumQueryInteger !== undefined) {
                localVarQueryParameter['enum_query_integer'] = enumQueryInteger;
            }

            if (enumHeaderStringArray) {
                localVarHeaderParameter['enum_header_string_array'] = enumHeaderStringArray.join(COLLECTION_FORMATS[""]));
            }

            if (enumHeaderString !== undefined && enumHeaderString !== null) {
                localVarHeaderParameter['enum_header_string'] = String(enumHeaderString);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {EnumFormBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumRequestBody(body?: EnumFormBody, options: any = {}): FetchArgs {
            const localVarPath = `/fake/enum/form`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EnumFormBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test inline additionalProperties
         * @param {{ [key: string]: string; }} body request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testInlineAdditionalProperties(body: { [key: string]: string; }, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testInlineAdditionalProperties.');
            }
            const localVarPath = `/fake/inline-additionalProperties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"{ [key: string]: string; }" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test json serialization of form data
         * @param {FakeJsonFormDataBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testJsonFormData(body: FakeJsonFormDataBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testJsonFormData.');
            }
            const localVarPath = `/fake/jsonFormData`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FakeJsonFormDataBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FakeApi - functional programming interface
 * @export
 */
export const FakeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Test serialization of outer boolean types
         * @param {boolean} [body] Input boolean as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterBooleanSerialize(body?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OuterBoolean> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterBooleanSerialize(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Test serialization of object with outer number type
         * @param {OuterComposite} [body] Input composite as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterCompositeSerialize(body?: OuterComposite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OuterComposite> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterCompositeSerialize(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Test serialization of outer number types
         * @param {number} [body] Input number as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterNumberSerialize(body?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OuterNumber> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterNumberSerialize(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Test serialization of outer string types
         * @param {string} [body] Input string as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterStringSerialize(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OuterString> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterStringSerialize(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * To test \"client\" model
         * @summary To test \"client\" model
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClientModel(body: Client, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Client> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testClientModel(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @param {FakeBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEndpointParameters(body: FakeBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testEndpointParameters(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {Array<string>} [enumHeaderStringArray] Header parameter enum test (string array)
         * @param {string} [enumHeaderString] Header parameter enum test (string)
         * @param {Array<string>} [enumQueryStringArray] Query parameter enum test (string array)
         * @param {string} [enumQueryString] Query parameter enum test (string)
         * @param {number} [enumQueryInteger] Query parameter enum test (double)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumParameters(enumHeaderStringArray?: Array<string>, enumHeaderString?: string, enumQueryStringArray?: Array<string>, enumQueryString?: string, enumQueryInteger?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {EnumFormBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumRequestBody(body?: EnumFormBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testEnumRequestBody(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary test inline additionalProperties
         * @param {{ [key: string]: string; }} body request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testInlineAdditionalProperties(body: { [key: string]: string; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testInlineAdditionalProperties(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary test json serialization of form data
         * @param {FakeJsonFormDataBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testJsonFormData(body: FakeJsonFormDataBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testJsonFormData(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FakeApi - factory interface
 * @export
 */
export const FakeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Test serialization of outer boolean types
         * @param {boolean} [body] Input boolean as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterBooleanSerialize(body?: boolean, options?: any) {
            return FakeApiFp(configuration).fakeOuterBooleanSerialize(body, options)(fetch, basePath);
        },
        /**
         * Test serialization of object with outer number type
         * @param {OuterComposite} [body] Input composite as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterCompositeSerialize(body?: OuterComposite, options?: any) {
            return FakeApiFp(configuration).fakeOuterCompositeSerialize(body, options)(fetch, basePath);
        },
        /**
         * Test serialization of outer number types
         * @param {number} [body] Input number as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterNumberSerialize(body?: number, options?: any) {
            return FakeApiFp(configuration).fakeOuterNumberSerialize(body, options)(fetch, basePath);
        },
        /**
         * Test serialization of outer string types
         * @param {string} [body] Input string as post body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fakeOuterStringSerialize(body?: string, options?: any) {
            return FakeApiFp(configuration).fakeOuterStringSerialize(body, options)(fetch, basePath);
        },
        /**
         * To test \"client\" model
         * @summary To test \"client\" model
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClientModel(body: Client, options?: any) {
            return FakeApiFp(configuration).testClientModel(body, options)(fetch, basePath);
        },
        /**
         * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @param {FakeBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEndpointParameters(body: FakeBody, options?: any) {
            return FakeApiFp(configuration).testEndpointParameters(body, options)(fetch, basePath);
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {Array<string>} [enumHeaderStringArray] Header parameter enum test (string array)
         * @param {string} [enumHeaderString] Header parameter enum test (string)
         * @param {Array<string>} [enumQueryStringArray] Query parameter enum test (string array)
         * @param {string} [enumQueryString] Query parameter enum test (string)
         * @param {number} [enumQueryInteger] Query parameter enum test (double)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumParameters(enumHeaderStringArray?: Array<string>, enumHeaderString?: string, enumQueryStringArray?: Array<string>, enumQueryString?: string, enumQueryInteger?: number, options?: any) {
            return FakeApiFp(configuration).testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, options)(fetch, basePath);
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @param {EnumFormBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEnumRequestBody(body?: EnumFormBody, options?: any) {
            return FakeApiFp(configuration).testEnumRequestBody(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary test inline additionalProperties
         * @param {{ [key: string]: string; }} body request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testInlineAdditionalProperties(body: { [key: string]: string; }, options?: any) {
            return FakeApiFp(configuration).testInlineAdditionalProperties(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary test json serialization of form data
         * @param {FakeJsonFormDataBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testJsonFormData(body: FakeJsonFormDataBody, options?: any) {
            return FakeApiFp(configuration).testJsonFormData(body, options)(fetch, basePath);
        },
    };
};

/**
 * FakeApi - interface
 * @export
 * @interface FakeApi
 */
export interface FakeApiInterface {
    /**
     * Test serialization of outer boolean types
     * @param {boolean} [body] Input boolean as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    fakeOuterBooleanSerialize(body?: boolean, options?: any): Promise<OuterBoolean>;

    /**
     * Test serialization of object with outer number type
     * @param {OuterComposite} [body] Input composite as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    fakeOuterCompositeSerialize(body?: OuterComposite, options?: any): Promise<OuterComposite>;

    /**
     * Test serialization of outer number types
     * @param {number} [body] Input number as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    fakeOuterNumberSerialize(body?: number, options?: any): Promise<OuterNumber>;

    /**
     * Test serialization of outer string types
     * @param {string} [body] Input string as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    fakeOuterStringSerialize(body?: string, options?: any): Promise<OuterString>;

    /**
     * To test \"client\" model
     * @summary To test \"client\" model
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testClientModel(body: Client, options?: any): Promise<Client>;

    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @param {FakeBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testEndpointParameters(body: FakeBody, options?: any): Promise<{}>;

    /**
     * To test enum parameters
     * @summary To test enum parameters
     * @param {Array<string>} [enumHeaderStringArray] Header parameter enum test (string array)
     * @param {string} [enumHeaderString] Header parameter enum test (string)
     * @param {Array<string>} [enumQueryStringArray] Query parameter enum test (string array)
     * @param {string} [enumQueryString] Query parameter enum test (string)
     * @param {number} [enumQueryInteger] Query parameter enum test (double)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testEnumParameters(enumHeaderStringArray?: Array<string>, enumHeaderString?: string, enumQueryStringArray?: Array<string>, enumQueryString?: string, enumQueryInteger?: number, options?: any): Promise<{}>;

    /**
     * To test enum parameters
     * @summary To test enum parameters
     * @param {EnumFormBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testEnumRequestBody(body?: EnumFormBody, options?: any): Promise<{}>;

    /**
     * 
     * @summary test inline additionalProperties
     * @param {{ [key: string]: string; }} body request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testInlineAdditionalProperties(body: { [key: string]: string; }, options?: any): Promise<{}>;

    /**
     * 
     * @summary test json serialization of form data
     * @param {FakeJsonFormDataBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApiInterface
     */
    testJsonFormData(body: FakeJsonFormDataBody, options?: any): Promise<{}>;

}

/**
 * FakeApi - object-oriented interface
 * @export
 * @class FakeApi
 * @extends {BaseAPI}
 */
export class FakeApi extends BaseAPI implements FakeApiInterface {
    /**
     * Test serialization of outer boolean types
     * @param {boolean} [body] Input boolean as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public fakeOuterBooleanSerialize(body?: boolean, options?: any) {
        return FakeApiFp(this.configuration).fakeOuterBooleanSerialize(body, options)(this.fetch, this.basePath);
    }

    /**
     * Test serialization of object with outer number type
     * @param {OuterComposite} [body] Input composite as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public fakeOuterCompositeSerialize(body?: OuterComposite, options?: any) {
        return FakeApiFp(this.configuration).fakeOuterCompositeSerialize(body, options)(this.fetch, this.basePath);
    }

    /**
     * Test serialization of outer number types
     * @param {number} [body] Input number as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public fakeOuterNumberSerialize(body?: number, options?: any) {
        return FakeApiFp(this.configuration).fakeOuterNumberSerialize(body, options)(this.fetch, this.basePath);
    }

    /**
     * Test serialization of outer string types
     * @param {string} [body] Input string as post body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public fakeOuterStringSerialize(body?: string, options?: any) {
        return FakeApiFp(this.configuration).fakeOuterStringSerialize(body, options)(this.fetch, this.basePath);
    }

    /**
     * To test \"client\" model
     * @summary To test \"client\" model
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testClientModel(body: Client, options?: any) {
        return FakeApiFp(this.configuration).testClientModel(body, options)(this.fetch, this.basePath);
    }

    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @param {FakeBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testEndpointParameters(body: FakeBody, options?: any) {
        return FakeApiFp(this.configuration).testEndpointParameters(body, options)(this.fetch, this.basePath);
    }

    /**
     * To test enum parameters
     * @summary To test enum parameters
     * @param {Array<string>} [enumHeaderStringArray] Header parameter enum test (string array)
     * @param {string} [enumHeaderString] Header parameter enum test (string)
     * @param {Array<string>} [enumQueryStringArray] Query parameter enum test (string array)
     * @param {string} [enumQueryString] Query parameter enum test (string)
     * @param {number} [enumQueryInteger] Query parameter enum test (double)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testEnumParameters(enumHeaderStringArray?: Array<string>, enumHeaderString?: string, enumQueryStringArray?: Array<string>, enumQueryString?: string, enumQueryInteger?: number, options?: any) {
        return FakeApiFp(this.configuration).testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, options)(this.fetch, this.basePath);
    }

    /**
     * To test enum parameters
     * @summary To test enum parameters
     * @param {EnumFormBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testEnumRequestBody(body?: EnumFormBody, options?: any) {
        return FakeApiFp(this.configuration).testEnumRequestBody(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary test inline additionalProperties
     * @param {{ [key: string]: string; }} body request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testInlineAdditionalProperties(body: { [key: string]: string; }, options?: any) {
        return FakeApiFp(this.configuration).testInlineAdditionalProperties(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary test json serialization of form data
     * @param {FakeJsonFormDataBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeApi
     */
    public testJsonFormData(body: FakeJsonFormDataBody, options?: any) {
        return FakeApiFp(this.configuration).testJsonFormData(body, options)(this.fetch, this.basePath);
    }

}
/**
 * FakeClassnameTags123Api - fetch parameter creator
 * @export
 */
export const FakeClassnameTags123ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary To test class name in snake case
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClassname(body: Client, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testClassname.');
            }
            const localVarPath = `/fake_classname_test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Client" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FakeClassnameTags123Api - functional programming interface
 * @export
 */
export const FakeClassnameTags123ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary To test class name in snake case
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClassname(body: Client, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Client> {
            const localVarFetchArgs = FakeClassnameTags123ApiFetchParamCreator(configuration).testClassname(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FakeClassnameTags123Api - factory interface
 * @export
 */
export const FakeClassnameTags123ApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary To test class name in snake case
         * @param {Client} body client model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClassname(body: Client, options?: any) {
            return FakeClassnameTags123ApiFp(configuration).testClassname(body, options)(fetch, basePath);
        },
    };
};

/**
 * FakeClassnameTags123Api - interface
 * @export
 * @interface FakeClassnameTags123Api
 */
export interface FakeClassnameTags123ApiInterface {
    /**
     * 
     * @summary To test class name in snake case
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeClassnameTags123ApiInterface
     */
    testClassname(body: Client, options?: any): Promise<Client>;

}

/**
 * FakeClassnameTags123Api - object-oriented interface
 * @export
 * @class FakeClassnameTags123Api
 * @extends {BaseAPI}
 */
export class FakeClassnameTags123Api extends BaseAPI implements FakeClassnameTags123ApiInterface {
    /**
     * 
     * @summary To test class name in snake case
     * @param {Client} body client model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FakeClassnameTags123Api
     */
    public testClassname(body: Client, options?: any) {
        return FakeClassnameTags123ApiFp(this.configuration).testClassname(body, options)(this.fetch, this.basePath);
    }

}
/**
 * MasterApi - fetch parameter creator
 * @export
 */
export const MasterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterOperation(options: any = {}): FetchArgs {
            const localVarPath = `/master`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_bearer_test required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterApi - functional programming interface
 * @export
 */
export const MasterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterOperation(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PartMaster>> {
            const localVarFetchArgs = MasterApiFetchParamCreator(configuration).masterOperation(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MasterApi - factory interface
 * @export
 */
export const MasterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterOperation(options?: any) {
            return MasterApiFp(configuration).masterOperation(options)(fetch, basePath);
        },
    };
};

/**
 * MasterApi - interface
 * @export
 * @interface MasterApi
 */
export interface MasterApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterApiInterface
     */
    masterOperation(options?: any): Promise<Array<PartMaster>>;

}

/**
 * MasterApi - object-oriented interface
 * @export
 * @class MasterApi
 * @extends {BaseAPI}
 */
export class MasterApi extends BaseAPI implements MasterApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterApi
     */
    public masterOperation(options?: any) {
        return MasterApiFp(this.configuration).masterOperation(options)(this.fetch, this.basePath);
    }

}
/**
 * ParrotApi - fetch parameter creator
 * @export
 */
export const ParrotApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {ParrotBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParrot(body?: ParrotBody1, options: any = {}): FetchArgs {
            const localVarPath = `/parrot`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParrotBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParrots(options: any = {}): FetchArgs {
            const localVarPath = `/parrot`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update parrots
         * @param {ParrotBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParrots(body?: ParrotBody, options: any = {}): FetchArgs {
            const localVarPath = `/parrot`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParrotBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParrotApi - functional programming interface
 * @export
 */
export const ParrotApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {ParrotBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParrot(body?: ParrotBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = ParrotApiFetchParamCreator(configuration).addParrot(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParrots(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Macaw | Parakeet>> {
            const localVarFetchArgs = ParrotApiFetchParamCreator(configuration).getParrots(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary update parrots
         * @param {ParrotBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParrots(body?: ParrotBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = ParrotApiFetchParamCreator(configuration).updateParrots(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ParrotApi - factory interface
 * @export
 */
export const ParrotApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {ParrotBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParrot(body?: ParrotBody1, options?: any) {
            return ParrotApiFp(configuration).addParrot(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParrots(options?: any) {
            return ParrotApiFp(configuration).getParrots(options)(fetch, basePath);
        },
        /**
         * 
         * @summary update parrots
         * @param {ParrotBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParrots(body?: ParrotBody, options?: any) {
            return ParrotApiFp(configuration).updateParrots(body, options)(fetch, basePath);
        },
    };
};

/**
 * ParrotApi - interface
 * @export
 * @interface ParrotApi
 */
export interface ParrotApiInterface {
    /**
     * 
     * @summary Add a new parrow to the store
     * @param {ParrotBody1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApiInterface
     */
    addParrot(body?: ParrotBody1, options?: any): Promise<InlineResponse2001>;

    /**
     * 
     * @summary get Parrots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApiInterface
     */
    getParrots(options?: any): Promise<Array<Macaw | Parakeet>>;

    /**
     * 
     * @summary update parrots
     * @param {ParrotBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApiInterface
     */
    updateParrots(body?: ParrotBody, options?: any): Promise<InlineResponse200>;

}

/**
 * ParrotApi - object-oriented interface
 * @export
 * @class ParrotApi
 * @extends {BaseAPI}
 */
export class ParrotApi extends BaseAPI implements ParrotApiInterface {
    /**
     * 
     * @summary Add a new parrow to the store
     * @param {ParrotBody1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public addParrot(body?: ParrotBody1, options?: any) {
        return ParrotApiFp(this.configuration).addParrot(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get Parrots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public getParrots(options?: any) {
        return ParrotApiFp(this.configuration).getParrots(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary update parrots
     * @param {ParrotBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public updateParrots(body?: ParrotBody, options?: any) {
        return ParrotApiFp(this.configuration).updateParrots(body, options)(this.fetch, this.basePath);
    }

}
/**
 * PetApi - fetch parameter creator
 * @export
 */
export const PetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new pet to the store
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet(body: Pet, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addPet.');
            }
            const localVarPath = `/pet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Pet" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a pet
         * @param {number} petId Pet id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet(petId: number, apiKey?: string, options: any = {}): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling deletePet.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubCategory} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doCategoryStuff(body?: SubCategory, options: any = {}): FetchArgs {
            const localVarPath = `/pet/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_basic_test required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubCategory" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @param {Array<string>} status Status values that need to be considered for filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByStatus(status: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling findPetsByStatus.');
            }
            const localVarPath = `/pet/findByStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (status) {
                localVarQueryParameter['status'] = status.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @param {Array<string>} tags Tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByTags(tags: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'tags' is not null or undefined
            if (tags === null || tags === undefined) {
                throw new RequiredError('tags','Required parameter tags was null or undefined when calling findPetsByTags.');
            }
            const localVarPath = `/pet/findByTags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPets(options: any = {}): FetchArgs {
            const localVarPath = `/allPets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_basic_test required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @param {number} petId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPetById(petId: number, options: any = {}): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling getPetById.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomPet(options: any = {}): FetchArgs {
            const localVarPath = `/randomPet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication http_basic_test required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing pet
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePet(body: Pet, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePet.');
            }
            const localVarPath = `/pet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Pet" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a pet in the store with form data
         * @param {number} petId ID of pet that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePetWithForm(petId: number, name?: string, status?: string, options: any = {}): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling updatePetWithForm.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploads an image
         * @param {number} petId ID of pet to update
         * @param {string} [additionalMetadata] 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(petId: number, additionalMetadata?: string, file?: Blob, options: any = {}): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling uploadFile.');
            }
            const localVarPath = `/pet/{petId}/uploadImage`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (additionalMetadata !== undefined) {
                localVarFormParams.set('additionalMetadata', additionalMetadata as any);
            }

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetApi - functional programming interface
 * @export
 */
export const PetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new pet to the store
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet(body: Pet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).addPet(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a pet
         * @param {number} petId Pet id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet(petId: number, apiKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).deletePet(petId, apiKey, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SubCategory} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doCategoryStuff(body?: SubCategory, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResponse> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).doCategoryStuff(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @param {Array<string>} status Status values that need to be considered for filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByStatus(status: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pet>> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByStatus(status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @param {Array<string>} tags Tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByTags(tags: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pet>> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByTags(tags, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPets(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AllPetsResponse> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).getAllPets(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @param {number} petId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPetById(petId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Pet> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).getPetById(petId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomPet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SinglePetResponse> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).getRandomPet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an existing pet
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePet(body: Pet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePet(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a pet in the store with form data
         * @param {number} petId ID of pet that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePetWithForm(petId: number, name?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePetWithForm(petId, name, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary uploads an image
         * @param {number} petId ID of pet to update
         * @param {string} [additionalMetadata] 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(petId: number, additionalMetadata?: string, file?: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResponse> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).uploadFile(petId, additionalMetadata, file, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PetApi - factory interface
 * @export
 */
export const PetApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new pet to the store
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet(body: Pet, options?: any) {
            return PetApiFp(configuration).addPet(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a pet
         * @param {number} petId Pet id to delete
         * @param {string} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet(petId: number, apiKey?: string, options?: any) {
            return PetApiFp(configuration).deletePet(petId, apiKey, options)(fetch, basePath);
        },
        /**
         * 
         * @param {SubCategory} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doCategoryStuff(body?: SubCategory, options?: any) {
            return PetApiFp(configuration).doCategoryStuff(body, options)(fetch, basePath);
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @param {Array<string>} status Status values that need to be considered for filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByStatus(status: Array<string>, options?: any) {
            return PetApiFp(configuration).findPetsByStatus(status, options)(fetch, basePath);
        },
        /**
         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @param {Array<string>} tags Tags to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetsByTags(tags: Array<string>, options?: any) {
            return PetApiFp(configuration).findPetsByTags(tags, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPets(options?: any) {
            return PetApiFp(configuration).getAllPets(options)(fetch, basePath);
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @param {number} petId ID of pet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPetById(petId: number, options?: any) {
            return PetApiFp(configuration).getPetById(petId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomPet(options?: any) {
            return PetApiFp(configuration).getRandomPet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an existing pet
         * @param {Pet} body Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePet(body: Pet, options?: any) {
            return PetApiFp(configuration).updatePet(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a pet in the store with form data
         * @param {number} petId ID of pet that needs to be updated
         * @param {string} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePetWithForm(petId: number, name?: string, status?: string, options?: any) {
            return PetApiFp(configuration).updatePetWithForm(petId, name, status, options)(fetch, basePath);
        },
        /**
         * 
         * @summary uploads an image
         * @param {number} petId ID of pet to update
         * @param {string} [additionalMetadata] 
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(petId: number, additionalMetadata?: string, file?: Blob, options?: any) {
            return PetApiFp(configuration).uploadFile(petId, additionalMetadata, file, options)(fetch, basePath);
        },
    };
};

/**
 * PetApi - interface
 * @export
 * @interface PetApi
 */
export interface PetApiInterface {
    /**
     * 
     * @summary Add a new pet to the store
     * @param {Pet} body Pet object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    addPet(body: Pet, options?: any): Promise<{}>;

    /**
     * 
     * @summary Deletes a pet
     * @param {number} petId Pet id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    deletePet(petId: number, apiKey?: string, options?: any): Promise<{}>;

    /**
     * 
     * @param {SubCategory} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    doCategoryStuff(body?: SubCategory, options?: any): Promise<ApiResponse>;

    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {Array<string>} status Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    findPetsByStatus(status: Array<string>, options?: any): Promise<Array<Pet>>;

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} tags Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    findPetsByTags(tags: Array<string>, options?: any): Promise<Array<Pet>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    getAllPets(options?: any): Promise<AllPetsResponse>;

    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} petId ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    getPetById(petId: number, options?: any): Promise<Pet>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    getRandomPet(options?: any): Promise<SinglePetResponse>;

    /**
     * 
     * @summary Update an existing pet
     * @param {Pet} body Pet object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    updatePet(body: Pet, options?: any): Promise<{}>;

    /**
     * 
     * @summary Updates a pet in the store with form data
     * @param {number} petId ID of pet that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    updatePetWithForm(petId: number, name?: string, status?: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary uploads an image
     * @param {number} petId ID of pet to update
     * @param {string} [additionalMetadata] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    uploadFile(petId: number, additionalMetadata?: string, file?: Blob, options?: any): Promise<ApiResponse>;

}

/**
 * PetApi - object-oriented interface
 * @export
 * @class PetApi
 * @extends {BaseAPI}
 */
export class PetApi extends BaseAPI implements PetApiInterface {
    /**
     * 
     * @summary Add a new pet to the store
     * @param {Pet} body Pet object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public addPet(body: Pet, options?: any) {
        return PetApiFp(this.configuration).addPet(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a pet
     * @param {number} petId Pet id to delete
     * @param {string} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public deletePet(petId: number, apiKey?: string, options?: any) {
        return PetApiFp(this.configuration).deletePet(petId, apiKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SubCategory} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public doCategoryStuff(body?: SubCategory, options?: any) {
        return PetApiFp(this.configuration).doCategoryStuff(body, options)(this.fetch, this.basePath);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {Array<string>} status Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public findPetsByStatus(status: Array<string>, options?: any) {
        return PetApiFp(this.configuration).findPetsByStatus(status, options)(this.fetch, this.basePath);
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} tags Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public findPetsByTags(tags: Array<string>, options?: any) {
        return PetApiFp(this.configuration).findPetsByTags(tags, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public getAllPets(options?: any) {
        return PetApiFp(this.configuration).getAllPets(options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} petId ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public getPetById(petId: number, options?: any) {
        return PetApiFp(this.configuration).getPetById(petId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public getRandomPet(options?: any) {
        return PetApiFp(this.configuration).getRandomPet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an existing pet
     * @param {Pet} body Pet object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public updatePet(body: Pet, options?: any) {
        return PetApiFp(this.configuration).updatePet(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a pet in the store with form data
     * @param {number} petId ID of pet that needs to be updated
     * @param {string} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public updatePetWithForm(petId: number, name?: string, status?: string, options?: any) {
        return PetApiFp(this.configuration).updatePetWithForm(petId, name, status, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary uploads an image
     * @param {number} petId ID of pet to update
     * @param {string} [additionalMetadata] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public uploadFile(petId: number, additionalMetadata?: string, file?: Blob, options?: any) {
        return PetApiFp(this.configuration).uploadFile(petId, additionalMetadata, file, options)(this.fetch, this.basePath);
    }

}
/**
 * StoreApi - fetch parameter creator
 * @export
 */
export const StoreApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         * @summary Delete purchase order by ID
         * @param {string} orderId ID of the order that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrder.');
            }
            const localVarPath = `/store/order/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options: any = {}): FetchArgs {
            const localVarPath = `/store/inventory`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @param {number} orderId ID of pet that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderById.');
            }
            const localVarPath = `/store/order/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Place an order for a pet
         * @param {Order} body order placed for purchasing the pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(body: Order, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling placeOrder.');
            }
            const localVarPath = `/store/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreApi - functional programming interface
 * @export
 */
export const StoreApiFp = function(configuration?: Configuration) {
    return {
        /**
         * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         * @summary Delete purchase order by ID
         * @param {string} orderId ID of the order that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).deleteOrder(orderId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: number; }> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getInventory(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @param {number} orderId ID of pet that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getOrderById(orderId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Place an order for a pet
         * @param {Order} body order placed for purchasing the pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(body: Order, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).placeOrder(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StoreApi - factory interface
 * @export
 */
export const StoreApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         * @summary Delete purchase order by ID
         * @param {string} orderId ID of the order that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options?: any) {
            return StoreApiFp(configuration).deleteOrder(orderId, options)(fetch, basePath);
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options?: any) {
            return StoreApiFp(configuration).getInventory(options)(fetch, basePath);
        },
        /**
         * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @param {number} orderId ID of pet that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options?: any) {
            return StoreApiFp(configuration).getOrderById(orderId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Place an order for a pet
         * @param {Order} body order placed for purchasing the pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(body: Order, options?: any) {
            return StoreApiFp(configuration).placeOrder(body, options)(fetch, basePath);
        },
    };
};

/**
 * StoreApi - interface
 * @export
 * @interface StoreApi
 */
export interface StoreApiInterface {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {string} orderId ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    deleteOrder(orderId: string, options?: any): Promise<{}>;

    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    getInventory(options?: any): Promise<{ [key: string]: number; }>;

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param {number} orderId ID of pet that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    getOrderById(orderId: number, options?: any): Promise<Order>;

    /**
     * 
     * @summary Place an order for a pet
     * @param {Order} body order placed for purchasing the pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    placeOrder(body: Order, options?: any): Promise<Order>;

}

/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */
export class StoreApi extends BaseAPI implements StoreApiInterface {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {string} orderId ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public deleteOrder(orderId: string, options?: any) {
        return StoreApiFp(this.configuration).deleteOrder(orderId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public getInventory(options?: any) {
        return StoreApiFp(this.configuration).getInventory(options)(this.fetch, this.basePath);
    }

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param {number} orderId ID of pet that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public getOrderById(orderId: number, options?: any) {
        return StoreApiFp(this.configuration).getOrderById(orderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Place an order for a pet
     * @param {Order} body order placed for purchasing the pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public placeOrder(body: Order, options?: any) {
        return StoreApiFp(this.configuration).placeOrder(body, options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithArrayInput(body: Array<User>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithArrayInput.');
            }
            const localVarPath = `/user/createWithArray`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;User&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithListInput(body: Array<User>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithListInput.');
            }
            const localVarPath = `/user/createWithList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;User&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getUserByName.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginUser.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options: any = {}): FetchArgs {
            const localVarPath = `/user/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {User} body Updated user object
         * @param {string} username name that need to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: User, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithArrayInput(body: Array<User>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithArrayInput(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithListInput(body: Array<User>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithListInput(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserByName(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).loginUser(username, password, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).logoutUser(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {User} body Updated user object
         * @param {string} username name that need to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: User, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUser(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options?: any) {
            return UserApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithArrayInput(body: Array<User>, options?: any) {
            return UserApiFp(configuration).createUsersWithArrayInput(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @param {Array<User>} body List of user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsersWithListInput(body: Array<User>, options?: any) {
            return UserApiFp(configuration).createUsersWithListInput(body, options)(fetch, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any) {
            return UserApiFp(configuration).deleteUser(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any) {
            return UserApiFp(configuration).getUserByName(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options?: any) {
            return UserApiFp(configuration).loginUser(username, password, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options?: any) {
            return UserApiFp(configuration).logoutUser(options)(fetch, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {User} body Updated user object
         * @param {string} username name that need to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: User, username: string, options?: any) {
            return UserApiFp(configuration).updateUser(body, username, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} body Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUser(body: User, options?: any): Promise<{}>;

    /**
     * 
     * @summary Creates list of users with given input array
     * @param {Array<User>} body List of user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUsersWithArrayInput(body: Array<User>, options?: any): Promise<{}>;

    /**
     * 
     * @summary Creates list of users with given input array
     * @param {Array<User>} body List of user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUsersWithListInput(body: Array<User>, options?: any): Promise<{}>;

    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUser(username: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserByName(username: string, options?: any): Promise<User>;

    /**
     * 
     * @summary Logs user into the system
     * @param {string} username The user name for login
     * @param {string} password The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    loginUser(username: string, password: string, options?: any): Promise<string>;

    /**
     * 
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    logoutUser(options?: any): Promise<{}>;

    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param {User} body Updated user object
     * @param {string} username name that need to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUser(body: User, username: string, options?: any): Promise<{}>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} body Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(body: User, options?: any) {
        return UserApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates list of users with given input array
     * @param {Array<User>} body List of user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUsersWithArrayInput(body: Array<User>, options?: any) {
        return UserApiFp(this.configuration).createUsersWithArrayInput(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates list of users with given input array
     * @param {Array<User>} body List of user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUsersWithListInput(body: Array<User>, options?: any) {
        return UserApiFp(this.configuration).createUsersWithListInput(body, options)(this.fetch, this.basePath);
    }

    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(username: string, options?: any) {
        return UserApiFp(this.configuration).deleteUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByName(username: string, options?: any) {
        return UserApiFp(this.configuration).getUserByName(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logs user into the system
     * @param {string} username The user name for login
     * @param {string} password The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginUser(username: string, password: string, options?: any) {
        return UserApiFp(this.configuration).loginUser(username, password, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logoutUser(options?: any) {
        return UserApiFp(this.configuration).logoutUser(options)(this.fetch, this.basePath);
    }

    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param {User} body Updated user object
     * @param {string} username name that need to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(body: User, username: string, options?: any) {
        return UserApiFp(this.configuration).updateUser(body, username, options)(this.fetch, this.basePath);
    }

}
