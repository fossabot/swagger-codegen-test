/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("PetApi", () => {
  let instance: api.PetApi
  beforeEach(function() {
    instance = new api.PetApi(config)
  });

  test("addPet", () => {
    const body: api.Pet = undefined
    return expect(instance.addPet(body, {})).resolves.toBe(null)
  })
  test("deletePet", () => {
    const petId: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deletePet(petId, apiKey, {})).resolves.toBe(null)
  })
  test("findPetsByStatus", () => {
    const status: string = "status_example"
    return expect(instance.findPetsByStatus(status, {})).resolves.toBe(null)
  })
  test("findPetsByTags", () => {
    const tags: Array<string> = undefined
    return expect(instance.findPetsByTags(tags, {})).resolves.toBe(null)
  })
  test("getPetById", () => {
    const petId: number = 789
    return expect(instance.getPetById(petId, {})).resolves.toBe(null)
  })
  test("updatePet", () => {
    const body: api.Pet = undefined
    return expect(instance.updatePet(body, {})).resolves.toBe(null)
  })
  test("updatePetWithForm", () => {
    const petId: number = 789
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.updatePetWithForm(petId, name, status, {})).resolves.toBe(null)
  })
  test("uploadFile", () => {
    const petId: number = 789
    const body: Object = undefined
    const additionalMetadata: string = "additionalMetadata_example"
    return expect(instance.uploadFile(petId, body, additionalMetadata, {})).resolves.toBe(null)
  })
})

describe("StoreApi", () => {
  let instance: api.StoreApi
  beforeEach(function() {
    instance = new api.StoreApi(config)
  });

  test("deleteOrder", () => {
    const orderId: number = 789
    return expect(instance.deleteOrder(orderId, {})).resolves.toBe(null)
  })
  test("getInventory", () => {
    return expect(instance.getInventory({})).resolves.toBe(null)
  })
  test("getOrderById", () => {
    const orderId: number = 789
    return expect(instance.getOrderById(orderId, {})).resolves.toBe(null)
  })
  test("placeOrder", () => {
    const body: api.Order = undefined
    return expect(instance.placeOrder(body, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("createUser", () => {
    const body: api.User = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("createUsersWithListInput", () => {
    const body: Array<api.User> = undefined
    return expect(instance.createUsersWithListInput(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const username: string = "username_example"
    return expect(instance.deleteUser(username, {})).resolves.toBe(null)
  })
  test("getUserByName", () => {
    const username: string = "username_example"
    return expect(instance.getUserByName(username, {})).resolves.toBe(null)
  })
  test("loginUser", () => {
    const username: string = "username_example"
    const password: string = "password_example"
    return expect(instance.loginUser(username, password, {})).resolves.toBe(null)
  })
  test("logoutUser", () => {
    return expect(instance.logoutUser({})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const username: string = "username_example"
    const body: api.User = undefined
    return expect(instance.updateUser(username, body, {})).resolves.toBe(null)
  })
})

