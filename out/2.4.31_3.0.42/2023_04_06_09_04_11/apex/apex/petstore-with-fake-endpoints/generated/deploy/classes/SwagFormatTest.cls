/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: " \
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * SwagFormatTest
 */
public class SwagFormatTest implements Swagger.MappedProperties {
    /**
     * Get integer
     * minimum: 10
     * maximum: 100
     * @return integer
     */
    public Integer integer { get; set; }

    /**
     * Get int32
     * minimum: 20
     * maximum: 200
     * @return int32
     */
    public Integer int32 { get; set; }

    /**
     * Get int64
     * @return int64
     */
    public Long int64 { get; set; }

    /**
     * Get r_number
     * minimum: 32.1
     * maximum: 543.2
     * @return r_number
     */
    public Double r_number { get; set; }

    /**
     * Get r_float
     * minimum: 54.3
     * maximum: 987.6
     * @return r_float
     */
    public Double r_float { get; set; }

    /**
     * Get double
     * minimum: 67.8
     * maximum: 123.4
     * @return double
     */
    public Double double { get; set; }

    /**
     * Get string
     * @return string
     */
    public String string { get; set; }

    /**
     * Get r_byte
     * @return r_byte
     */
    public Blob r_byte { get; set; }

    /**
     * Get binary
     * @return binary
     */
    public String binary { get; set; }

    /**
     * Get r_date
     * @return r_date
     */
    public Date r_date { get; set; }

    /**
     * Get dateTime
     * @return dateTime
     */
    public Datetime dateTime { get; set; }

    /**
     * Get uuid
     * @return uuid
     */
    public String uuid { get; set; }

    /**
     * Get password
     * @return password
     */
    public String password { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'number' => 'r_number',
        'float' => 'r_float',
        'byte' => 'r_byte',
        'date' => 'r_date'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagFormatTest getExample() {
        SwagFormatTest formatTest = new SwagFormatTest();
        formatTest.integer = 123;
        formatTest.int32 = 123;
        formatTest.int64 = 123456789L;
        formatTest.r_number = 1.3579;
        formatTest.r_float = 1.3579;
        formatTest.double = 1.3579;
        formatTest.string = 'aeiou';
        formatTest.r_byte = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        formatTest.binary = ;
        formatTest.r_date = Date.newInstance(2000, 1, 23);
        formatTest.dateTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        formatTest.uuid = '046b6c7f-0b8a-43b9-b35d-6489e6daee91';
        formatTest.password = 'aeiou';
        return formatTest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFormatTest) {
            SwagFormatTest formatTest = (SwagFormatTest) obj;
            return this.integer == formatTest.integer
                && this.int32 == formatTest.int32
                && this.int64 == formatTest.int64
                && this.r_number == formatTest.r_number
                && this.r_float == formatTest.r_float
                && this.double == formatTest.double
                && this.string == formatTest.string
                && this.r_byte == formatTest.r_byte
                && this.binary == formatTest.binary
                && this.r_date == formatTest.r_date
                && this.dateTime == formatTest.dateTime
                && this.uuid == formatTest.uuid
                && this.password == formatTest.password;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (integer == null ? 0 : System.hashCode(integer));
        hashCode = (17 * hashCode) + (int32 == null ? 0 : System.hashCode(int32));
        hashCode = (17 * hashCode) + (int64 == null ? 0 : System.hashCode(int64));
        hashCode = (17 * hashCode) + (r_number == null ? 0 : System.hashCode(r_number));
        hashCode = (17 * hashCode) + (r_float == null ? 0 : System.hashCode(r_float));
        hashCode = (17 * hashCode) + (double == null ? 0 : System.hashCode(double));
        hashCode = (17 * hashCode) + (string == null ? 0 : System.hashCode(string));
        hashCode = (17 * hashCode) + (r_byte == null ? 0 : System.hashCode(r_byte));
        hashCode = (17 * hashCode) + (binary == null ? 0 : System.hashCode(binary));
        hashCode = (17 * hashCode) + (r_date == null ? 0 : System.hashCode(r_date));
        hashCode = (17 * hashCode) + (dateTime == null ? 0 : System.hashCode(dateTime));
        hashCode = (17 * hashCode) + (uuid == null ? 0 : System.hashCode(uuid));
        hashCode = (17 * hashCode) + (password == null ? 0 : System.hashCode(password));
        return hashCode;
    }
}

