/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.FakeApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \&quot; \\
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache-2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.FakeApi');

goog.require('API.Client.ByteArray');
goog.require('API.Client.Client');
goog.require('API.Client.OuterBoolean');
goog.require('API.Client.OuterComposite');
goog.require('API.Client.OuterNumber');
goog.require('API.Client.OuterString');
goog.require('API.Client.User');
goog.require('API.Client.date');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.FakeApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('FakeApiBasePath') ?
                   /** @type {!string} */ ($injector.get('FakeApiBasePath')) :
                   'http://petstore.swagger.io:80/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('FakeApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('FakeApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.FakeApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Test serialization of outer boolean types
 * @param {!OuterBoolean=} opt_body Input boolean as post body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OuterBoolean>}
 */
API.Client.FakeApi.prototype.fakeOuterBooleanSerialize = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/outer/boolean';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Test serialization of object with outer number type
 * @param {!OuterComposite=} opt_body Input composite as post body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OuterComposite>}
 */
API.Client.FakeApi.prototype.fakeOuterCompositeSerialize = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/outer/composite';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Test serialization of outer number types
 * @param {!OuterNumber=} opt_body Input number as post body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OuterNumber>}
 */
API.Client.FakeApi.prototype.fakeOuterNumberSerialize = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/outer/number';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Test serialization of outer string types
 * @param {!OuterString=} opt_body Input string as post body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OuterString>}
 */
API.Client.FakeApi.prototype.fakeOuterStringSerialize = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/outer/string';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!User} body 
 * @param {!string} query 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FakeApi.prototype.testBodyWithQueryParams = function(body, query, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/body-with-query-params';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling testBodyWithQueryParams');
  }
  // verify required parameter 'query' is set
  if (!query) {
    throw new Error('Missing required parameter query when calling testBodyWithQueryParams');
  }
  if (query !== undefined) {
    queryParameters['query'] = query;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * To test \&quot;client\&quot; model
 * To test \&quot;client\&quot; model
 * @param {!Client} body client model
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Client>}
 */
API.Client.FakeApi.prototype.testClientModel = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling testClientModel');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
 * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
 * @param {!number} number None
 * @param {!number} _double None
 * @param {!string} patternWithoutDelimiter None
 * @param {!API.Client.ByteArray} _byte None
 * @param {!number=} opt_integer None
 * @param {!number=} opt_int32 None
 * @param {!number=} opt_int64 None
 * @param {!number=} opt_float None
 * @param {!string=} opt_string None
 * @param {!string=} opt_binary None
 * @param {!API.Client.date=} opt_date None
 * @param {!Date=} opt_dateTime None
 * @param {!string=} opt_password None
 * @param {!string=} opt_callback None
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FakeApi.prototype.testEndpointParameters = function(number, _double, patternWithoutDelimiter, _byte, opt_integer, opt_int32, opt_int64, opt_float, opt_string, opt_binary, opt_date, opt_dateTime, opt_password, opt_callback, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'number' is set
  if (!number) {
    throw new Error('Missing required parameter number when calling testEndpointParameters');
  }
  // verify required parameter '_double' is set
  if (!_double) {
    throw new Error('Missing required parameter _double when calling testEndpointParameters');
  }
  // verify required parameter 'patternWithoutDelimiter' is set
  if (!patternWithoutDelimiter) {
    throw new Error('Missing required parameter patternWithoutDelimiter when calling testEndpointParameters');
  }
  // verify required parameter '_byte' is set
  if (!_byte) {
    throw new Error('Missing required parameter _byte when calling testEndpointParameters');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['integer'] = opt_integer;

  formParams['int32'] = opt_int32;

  formParams['int64'] = opt_int64;

  formParams['number'] = number;

  formParams['float'] = opt_float;

  formParams['double'] = _double;

  formParams['string'] = opt_string;

  formParams['pattern_without_delimiter'] = patternWithoutDelimiter;

  formParams['byte'] = _byte;

  formParams['binary'] = opt_binary;

  formParams['date'] = opt_date;

  formParams['dateTime'] = opt_dateTime;

  formParams['password'] = opt_password;

  formParams['callback'] = opt_callback;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * To test enum parameters
 * To test enum parameters
 * @param {!Array<!string>=} opt_enumFormStringArray Form parameter enum test (string array)
 * @param {!string=} opt_enumFormString Form parameter enum test (string)
 * @param {!Array<!string>=} opt_enumHeaderStringArray Header parameter enum test (string array)
 * @param {!string=} opt_enumHeaderString Header parameter enum test (string)
 * @param {!Array<!string>=} opt_enumQueryStringArray Query parameter enum test (string array)
 * @param {!string=} opt_enumQueryString Query parameter enum test (string)
 * @param {!number=} opt_enumQueryInteger Query parameter enum test (double)
 * @param {!number=} opt_enumQueryDouble Query parameter enum test (double)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FakeApi.prototype.testEnumParameters = function(opt_enumFormStringArray, opt_enumFormString, opt_enumHeaderStringArray, opt_enumHeaderString, opt_enumQueryStringArray, opt_enumQueryString, opt_enumQueryInteger, opt_enumQueryDouble, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  if (opt_enumQueryStringArray !== undefined) {
    queryParameters['enum_query_string_array'] = opt_enumQueryStringArray;
  }

  if (opt_enumQueryString !== undefined) {
    queryParameters['enum_query_string'] = opt_enumQueryString;
  }

  if (opt_enumQueryInteger !== undefined) {
    queryParameters['enum_query_integer'] = opt_enumQueryInteger;
  }

  headerParams['enum_header_string_array'] = opt_enumHeaderStringArray;

  headerParams['enum_header_string'] = opt_enumHeaderString;

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['enum_form_string_array'] = opt_enumFormStringArray;

  formParams['enum_form_string'] = opt_enumFormString;

  formParams['enum_query_double'] = opt_enumQueryDouble;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * test inline additionalProperties
 * 
 * @param {!API.Client.Object} param request body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FakeApi.prototype.testInlineAdditionalProperties = function(param, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/inline-additionalProperties';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'param' is set
  if (!param) {
    throw new Error('Missing required parameter param when calling testInlineAdditionalProperties');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: param,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * test json serialization of form data
 * 
 * @param {!string} param field1
 * @param {!string} param2 field2
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.FakeApi.prototype.testJsonFormData = function(param, param2, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fake/jsonFormData';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'param' is set
  if (!param) {
    throw new Error('Missing required parameter param when calling testJsonFormData');
  }
  // verify required parameter 'param2' is set
  if (!param2) {
    throw new Error('Missing required parameter param2 when calling testJsonFormData');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['param'] = param;

  formParams['param2'] = param2;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
