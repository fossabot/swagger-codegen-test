/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package io.swagger.server.api

import java.math.BigDecimal
import io.swagger.server.model.Byte[]
import io.swagger.server.model.Client
import java.util.Date
import io.swagger.server.model.OuterBoolean
import io.swagger.server.model.OuterComposite
import io.swagger.server.model.OuterNumber
import io.swagger.server.model.OuterString
import io.swagger.server.model.User

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class FakeApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "FakeApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val fakeOuterBooleanSerializeOperation = (apiOperation[OuterBoolean]("fakeOuterBooleanSerialize")
      summary ""
      parameters(bodyParam[OuterBoolean]("body").description("").optional)
  )

  post("/fake/outer/boolean",operation(fakeOuterBooleanSerializeOperation)) {
    
    
          val body = parsedBody.extract[OuterBoolean]

    println("body: " + body)
  }

  

  val fakeOuterCompositeSerializeOperation = (apiOperation[OuterComposite]("fakeOuterCompositeSerialize")
      summary ""
      parameters(bodyParam[OuterComposite]("body").description("").optional)
  )

  post("/fake/outer/composite",operation(fakeOuterCompositeSerializeOperation)) {
    
    
          val body = parsedBody.extract[OuterComposite]

    println("body: " + body)
  }

  

  val fakeOuterNumberSerializeOperation = (apiOperation[OuterNumber]("fakeOuterNumberSerialize")
      summary ""
      parameters(bodyParam[OuterNumber]("body").description("").optional)
  )

  post("/fake/outer/number",operation(fakeOuterNumberSerializeOperation)) {
    
    
          val body = parsedBody.extract[OuterNumber]

    println("body: " + body)
  }

  

  val fakeOuterStringSerializeOperation = (apiOperation[OuterString]("fakeOuterStringSerialize")
      summary ""
      parameters(bodyParam[OuterString]("body").description("").optional)
  )

  post("/fake/outer/string",operation(fakeOuterStringSerializeOperation)) {
    
    
          val body = parsedBody.extract[OuterString]

    println("body: " + body)
  }

  

  val testBodyWithQueryParamsOperation = (apiOperation[Unit]("testBodyWithQueryParams")
      summary ""
      parameters(bodyParam[User]("body").description(""), queryParam[String]("query").description(""))
  )

  put("/fake/body-with-query-params",operation(testBodyWithQueryParamsOperation)) {
    
    
          val body = parsedBody.extract[User]

    println("body: " + body)
    
    
                val query = params.getAs[String]("query")

    println("query: " + query)
  }

  

  val testClientModelOperation = (apiOperation[Client]("testClientModel")
      summary "To test \"client\" model"
      parameters(bodyParam[Client]("body").description(""))
  )

  patch("/fake",operation(testClientModelOperation)) {
    
    
          val body = parsedBody.extract[Client]

    println("body: " + body)
  }

  

  val testEndpointParametersOperation = (apiOperation[Unit]("testEndpointParameters")
      summary "Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 "
      parameters(formParam[BigDecimal]("number").description(""), formParam[Double]("`double`").description(""), formParam[String]("patternWithoutDelimiter").description(""), formParam[Byte[]]("`byte`").description(""), formParam[Int]("integer").description("").optional, formParam[Int]("int32").description("").optional, formParam[Long]("int64").description("").optional, formParam[Float]("`float`").description("").optional, formParam[String]("string").description("").optional, formParam[String]("binary").description("").optional, formParam[Date]("date").description("").optional, formParam[Date]("dateTime").description("").optional, formParam[String]("password").description("").optional, formParam[String]("callback").description("").optional)
  )

  post("/fake",operation(testEndpointParametersOperation)) {
    
    
          val number = params.getAs[BigDecimal]("number")

    println("number: " + number)
    
    
          val `double` = params.getAs[Double]("`double`")

    println("`double`: " + `double`)
    
    
          val patternWithoutDelimiter = params.getAs[String]("patternWithoutDelimiter")

    println("patternWithoutDelimiter: " + patternWithoutDelimiter)
    
    
          val `byte` = params.getAs[Byte[]]("`byte`")

    println("`byte`: " + `byte`)
    
    
          val integer = params.getAs[Int]("integer")

    println("integer: " + integer)
    
    
          val int32 = params.getAs[Int]("int32")

    println("int32: " + int32)
    
    
          val int64 = params.getAs[Long]("int64")

    println("int64: " + int64)
    
    
          val `float` = params.getAs[Float]("`float`")

    println("`float`: " + `float`)
    
    
          val string = params.getAs[String]("string")

    println("string: " + string)
    
    
          val binary = params.getAs[String]("binary")

    println("binary: " + binary)
    
    
          val date = params.getAs[Date]("date")

    println("date: " + date)
    
    
          val dateTime = params.getAs[Date]("dateTime")

    println("dateTime: " + dateTime)
    
    
          val password = params.getAs[String]("password")

    println("password: " + password)
    
    
          val callback = params.getAs[String]("callback")

    println("callback: " + callback)
  }

  

  val testEnumParametersOperation = (apiOperation[Unit]("testEnumParameters")
      summary "To test enum parameters"
      parameters(formParam[List[String]]("enumFormStringArray").description("").optional, formParam[String]("enumFormString").description("").optional.defaultValue(-efg), headerParam[List[String]]("enumHeaderStringArray").description("").optional, headerParam[String]("enumHeaderString").description("").optional.defaultValue(-efg), queryParam[List[String]]("enumQueryStringArray").description("").optional, queryParam[String]("enumQueryString").description("").optional.defaultValue(-efg), queryParam[Int]("enumQueryInteger").description("").optional, formParam[Double]("enumQueryDouble").description("").optional)
  )

  get("/fake",operation(testEnumParametersOperation)) {
    
    
          val enumFormStringArray = params.getAs[List[String]]("enumFormStringArray")

    println("enumFormStringArray: " + enumFormStringArray)
    
    
          val enumFormString = params.getAs[String]("enumFormString")

    println("enumFormString: " + enumFormString)
    
    
          val enumHeaderStringArray = request.getHeader("enumHeaderStringArray")

    println("enumHeaderStringArray: " + enumHeaderStringArray)
    
    
          val enumHeaderString = request.getHeader("enumHeaderString")

    println("enumHeaderString: " + enumHeaderString)
    
    
          val enumQueryStringArrayString = params.getAs[String]("enumQueryStringArray")
      val enumQueryStringArray = if("csv" == "default" || "csv" == "csv") {
        enumQueryStringArrayString match {
          case Some(str) => str.split(",").toSeq
          case None => Seq()
        }
      }
      else
        Seq()
      

    println("enumQueryStringArray: " + enumQueryStringArray)
    
    
                val enumQueryString = params.getAs[String]("enumQueryString")

    println("enumQueryString: " + enumQueryString)
    
    
                val enumQueryInteger = params.getAs[Int]("enumQueryInteger")

    println("enumQueryInteger: " + enumQueryInteger)
    
    
          val enumQueryDouble = params.getAs[Double]("enumQueryDouble")

    println("enumQueryDouble: " + enumQueryDouble)
  }

  

  val testInlineAdditionalPropertiesOperation = (apiOperation[Unit]("testInlineAdditionalProperties")
      summary "test inline additionalProperties"
      parameters(bodyParam[Object]("param").description(""))
  )

  post("/fake/inline-additionalProperties",operation(testInlineAdditionalPropertiesOperation)) {
    
    
          val param = parsedBody.extract[Object]

    println("param: " + param)
  }

  

  val testJsonFormDataOperation = (apiOperation[Unit]("testJsonFormData")
      summary "test json serialization of form data"
      parameters(formParam[String]("param").description(""), formParam[String]("param2").description(""))
  )

  get("/fake/jsonFormData",operation(testJsonFormDataOperation)) {
    
    
          val param = params.getAs[String]("param")

    println("param: " + param)
    
    
          val param2 = params.getAs[String]("param2")

    println("param2: " + param2)
  }

}
