/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Client } from '../model/client';
import { OuterBoolean } from '../model/outerBoolean';
import { OuterComposite } from '../model/outerComposite';
import { OuterNumber } from '../model/outerNumber';
import { OuterString } from '../model/outerString';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FakeService {

    protected basePath = 'http://petstore.swagger.io:80/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Test serialization of outer boolean types
     * @param body Input boolean as post body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fakeOuterBooleanSerialize(body?: OuterBoolean, observe?: 'body', reportProgress?: boolean): Observable<OuterBoolean>;
    public fakeOuterBooleanSerialize(body?: OuterBoolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OuterBoolean>>;
    public fakeOuterBooleanSerialize(body?: OuterBoolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OuterBoolean>>;
    public fakeOuterBooleanSerialize(body?: OuterBoolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OuterBoolean>(`${this.basePath}/fake/outer/boolean`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Test serialization of object with outer number type
     * @param body Input composite as post body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fakeOuterCompositeSerialize(body?: OuterComposite, observe?: 'body', reportProgress?: boolean): Observable<OuterComposite>;
    public fakeOuterCompositeSerialize(body?: OuterComposite, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OuterComposite>>;
    public fakeOuterCompositeSerialize(body?: OuterComposite, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OuterComposite>>;
    public fakeOuterCompositeSerialize(body?: OuterComposite, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OuterComposite>(`${this.basePath}/fake/outer/composite`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Test serialization of outer number types
     * @param body Input number as post body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fakeOuterNumberSerialize(body?: OuterNumber, observe?: 'body', reportProgress?: boolean): Observable<OuterNumber>;
    public fakeOuterNumberSerialize(body?: OuterNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OuterNumber>>;
    public fakeOuterNumberSerialize(body?: OuterNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OuterNumber>>;
    public fakeOuterNumberSerialize(body?: OuterNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OuterNumber>(`${this.basePath}/fake/outer/number`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Test serialization of outer string types
     * @param body Input string as post body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fakeOuterStringSerialize(body?: OuterString, observe?: 'body', reportProgress?: boolean): Observable<OuterString>;
    public fakeOuterStringSerialize(body?: OuterString, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OuterString>>;
    public fakeOuterStringSerialize(body?: OuterString, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OuterString>>;
    public fakeOuterStringSerialize(body?: OuterString, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OuterString>(`${this.basePath}/fake/outer/string`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testBodyWithQueryParams(body: User, query: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testBodyWithQueryParams(body: User, query: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testBodyWithQueryParams(body: User, query: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testBodyWithQueryParams(body: User, query: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling testBodyWithQueryParams.');
        }

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling testBodyWithQueryParams.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/fake/body-with-query-params`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To test \&quot;client\&quot; model
     * To test \&quot;client\&quot; model
     * @param body client model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testClientModel(body: Client, observe?: 'body', reportProgress?: boolean): Observable<Client>;
    public testClientModel(body: Client, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Client>>;
    public testClientModel(body: Client, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Client>>;
    public testClientModel(body: Client, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling testClientModel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Client>(`${this.basePath}/fake`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @param number None
     * @param _double None
     * @param patternWithoutDelimiter None
     * @param _byte None
     * @param integer None
     * @param int32 None
     * @param int64 None
     * @param _float None
     * @param string None
     * @param binary None
     * @param date None
     * @param dateTime None
     * @param password None
     * @param callback None
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testEndpointParameters(number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, string?: string, binary?: string, date?: string, dateTime?: Date, password?: string, callback?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testEndpointParameters(number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, string?: string, binary?: string, date?: string, dateTime?: Date, password?: string, callback?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testEndpointParameters(number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, string?: string, binary?: string, date?: string, dateTime?: Date, password?: string, callback?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testEndpointParameters(number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, string?: string, binary?: string, date?: string, dateTime?: Date, password?: string, callback?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling testEndpointParameters.');
        }

        if (_double === null || _double === undefined) {
            throw new Error('Required parameter _double was null or undefined when calling testEndpointParameters.');
        }

        if (patternWithoutDelimiter === null || patternWithoutDelimiter === undefined) {
            throw new Error('Required parameter patternWithoutDelimiter was null or undefined when calling testEndpointParameters.');
        }

        if (_byte === null || _byte === undefined) {
            throw new Error('Required parameter _byte was null or undefined when calling testEndpointParameters.');
        }











        let headers = this.defaultHeaders;

        // authentication (http_basic_test) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml; charset=utf-8',
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/xml; charset=utf-8',
            'application/json; charset=utf-8'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (integer !== undefined) {
            formParams = formParams.append('integer', <any>integer) || formParams;
        }
        if (int32 !== undefined) {
            formParams = formParams.append('int32', <any>int32) || formParams;
        }
        if (int64 !== undefined) {
            formParams = formParams.append('int64', <any>int64) || formParams;
        }
        if (number !== undefined) {
            formParams = formParams.append('number', <any>number) || formParams;
        }
        if (_float !== undefined) {
            formParams = formParams.append('float', <any>_float) || formParams;
        }
        if (_double !== undefined) {
            formParams = formParams.append('double', <any>_double) || formParams;
        }
        if (string !== undefined) {
            formParams = formParams.append('string', <any>string) || formParams;
        }
        if (patternWithoutDelimiter !== undefined) {
            formParams = formParams.append('pattern_without_delimiter', <any>patternWithoutDelimiter) || formParams;
        }
        if (_byte !== undefined) {
            formParams = formParams.append('byte', <any>_byte) || formParams;
        }
        if (binary !== undefined) {
            formParams = formParams.append('binary', <any>binary) || formParams;
        }
        if (date !== undefined) {
            formParams = formParams.append('date', <any>date) || formParams;
        }
        if (dateTime !== undefined) {
            formParams = formParams.append('dateTime', <any>dateTime) || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }
        if (callback !== undefined) {
            formParams = formParams.append('callback', <any>callback) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/fake`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * To test enum parameters
     * To test enum parameters
     * @param enumFormStringArray Form parameter enum test (string array)
     * @param enumFormString Form parameter enum test (string)
     * @param enumHeaderStringArray Header parameter enum test (string array)
     * @param enumHeaderString Header parameter enum test (string)
     * @param enumQueryStringArray Query parameter enum test (string array)
     * @param enumQueryString Query parameter enum test (string)
     * @param enumQueryInteger Query parameter enum test (double)
     * @param enumQueryDouble Query parameter enum test (double)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (enumQueryStringArray) {
            queryParameters = queryParameters.set('enum_query_string_array', enumQueryStringArray.join(COLLECTION_FORMATS['csv']));
        }
        if (enumQueryString !== undefined && enumQueryString !== null) {
            queryParameters = queryParameters.set('enum_query_string', <any>enumQueryString);
        }
        if (enumQueryInteger !== undefined && enumQueryInteger !== null) {
            queryParameters = queryParameters.set('enum_query_integer', <any>enumQueryInteger);
        }

        let headers = this.defaultHeaders;
        if (enumHeaderStringArray) {
            headers = headers.set('enum_header_string_array', enumHeaderStringArray.join(COLLECTION_FORMATS['csv']));
        }
        if (enumHeaderString !== undefined && enumHeaderString !== null) {
            headers = headers.set('enum_header_string', String(enumHeaderString));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (enumFormStringArray) {
            formParams = formParams.append('enum_form_string_array', enumFormStringArray.join(COLLECTION_FORMATS['csv'])) || formParams;
        }
        if (enumFormString !== undefined) {
            formParams = formParams.append('enum_form_string', <any>enumFormString) || formParams;
        }
        if (enumQueryDouble !== undefined) {
            formParams = formParams.append('enum_query_double', <any>enumQueryDouble) || formParams;
        }

        return this.httpClient.get<any>(`${this.basePath}/fake`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * test inline additionalProperties
     * 
     * @param param request body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testInlineAdditionalProperties(param: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testInlineAdditionalProperties(param: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testInlineAdditionalProperties(param: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testInlineAdditionalProperties(param: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (param === null || param === undefined) {
            throw new Error('Required parameter param was null or undefined when calling testInlineAdditionalProperties.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/fake/inline-additionalProperties`,
            param,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * test json serialization of form data
     * 
     * @param param field1
     * @param param2 field2
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testJsonFormData(param: string, param2: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testJsonFormData(param: string, param2: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testJsonFormData(param: string, param2: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testJsonFormData(param: string, param2: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (param === null || param === undefined) {
            throw new Error('Required parameter param was null or undefined when calling testJsonFormData.');
        }

        if (param2 === null || param2 === undefined) {
            throw new Error('Required parameter param2 was null or undefined when calling testJsonFormData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (param !== undefined) {
            formParams = formParams.append('param', <any>param) || formParams;
        }
        if (param2 !== undefined) {
            formParams = formParams.append('param2', <any>param2) || formParams;
        }

        return this.httpClient.get<any>(`${this.basePath}/fake/jsonFormData`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
