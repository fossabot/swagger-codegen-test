# coding: utf-8

"""
    Swagger Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValMemberChoice1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'val_date_of_birth': 'date',
        'val_leaving_date': 'date'
    }

    attribute_map = {
        'val_date_of_birth': 'val_date_of_birth',
        'val_leaving_date': 'val_leaving_date'
    }

    def __init__(self, val_date_of_birth=None, val_leaving_date=None):  # noqa: E501
        """ValMemberChoice1 - a model defined in Swagger"""  # noqa: E501
        self._val_date_of_birth = None
        self._val_leaving_date = None
        self.discriminator = None
        self.val_date_of_birth = val_date_of_birth
        if val_leaving_date is not None:
            self.val_leaving_date = val_leaving_date

    @property
    def val_date_of_birth(self):
        """Gets the val_date_of_birth of this ValMemberChoice1.  # noqa: E501

        Business Term: Date Of Birth Definition: The date of birth of the member. Purpose: To be able to uniquely identify a member within a scheme.  # noqa: E501

        :return: The val_date_of_birth of this ValMemberChoice1.  # noqa: E501
        :rtype: date
        """
        return self._val_date_of_birth

    @val_date_of_birth.setter
    def val_date_of_birth(self, val_date_of_birth):
        """Sets the val_date_of_birth of this ValMemberChoice1.

        Business Term: Date Of Birth Definition: The date of birth of the member. Purpose: To be able to uniquely identify a member within a scheme.  # noqa: E501

        :param val_date_of_birth: The val_date_of_birth of this ValMemberChoice1.  # noqa: E501
        :type: date
        """
        if val_date_of_birth is None:
            raise ValueError("Invalid value for `val_date_of_birth`, must not be `None`")  # noqa: E501

        self._val_date_of_birth = val_date_of_birth

    @property
    def val_leaving_date(self):
        """Gets the val_leaving_date of this ValMemberChoice1.  # noqa: E501

        Business Term: Leaving Date Definition: The date the member left/is due to leave the scheme. Purpose: To identify those members that have left or are due to leave the scheme. To be able to calculate the benefit insured/premium payable in respect of the member/category.  # noqa: E501

        :return: The val_leaving_date of this ValMemberChoice1.  # noqa: E501
        :rtype: date
        """
        return self._val_leaving_date

    @val_leaving_date.setter
    def val_leaving_date(self, val_leaving_date):
        """Sets the val_leaving_date of this ValMemberChoice1.

        Business Term: Leaving Date Definition: The date the member left/is due to leave the scheme. Purpose: To identify those members that have left or are due to leave the scheme. To be able to calculate the benefit insured/premium payable in respect of the member/category.  # noqa: E501

        :param val_leaving_date: The val_leaving_date of this ValMemberChoice1.  # noqa: E501
        :type: date
        """

        self._val_leaving_date = val_leaving_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValMemberChoice1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValMemberChoice1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
