# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.outer_enum import OuterEnum  # noqa: F401,E501
from swagger_server import util


class EnumTest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enum_string: str=None, enum_integer: int=None, enum_number: float=None, outer_enum: OuterEnum=None):  # noqa: E501
        """EnumTest - a model defined in Swagger

        :param enum_string: The enum_string of this EnumTest.  # noqa: E501
        :type enum_string: str
        :param enum_integer: The enum_integer of this EnumTest.  # noqa: E501
        :type enum_integer: int
        :param enum_number: The enum_number of this EnumTest.  # noqa: E501
        :type enum_number: float
        :param outer_enum: The outer_enum of this EnumTest.  # noqa: E501
        :type outer_enum: OuterEnum
        """
        self.swagger_types = {
            'enum_string': str,
            'enum_integer': int,
            'enum_number': float,
            'outer_enum': OuterEnum
        }

        self.attribute_map = {
            'enum_string': 'enum_string',
            'enum_integer': 'enum_integer',
            'enum_number': 'enum_number',
            'outer_enum': 'outerEnum'
        }
        self._enum_string = enum_string
        self._enum_integer = enum_integer
        self._enum_number = enum_number
        self._outer_enum = outer_enum

    @classmethod
    def from_dict(cls, dikt) -> 'EnumTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Enum_Test of this EnumTest.  # noqa: E501
        :rtype: EnumTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enum_string(self) -> str:
        """Gets the enum_string of this EnumTest.


        :return: The enum_string of this EnumTest.
        :rtype: str
        """
        return self._enum_string

    @enum_string.setter
    def enum_string(self, enum_string: str):
        """Sets the enum_string of this EnumTest.


        :param enum_string: The enum_string of this EnumTest.
        :type enum_string: str
        """
        allowed_values = ["UPPER", "lower", ""]  # noqa: E501
        if enum_string not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_string` ({0}), must be one of {1}"
                .format(enum_string, allowed_values)
            )

        self._enum_string = enum_string

    @property
    def enum_integer(self) -> int:
        """Gets the enum_integer of this EnumTest.


        :return: The enum_integer of this EnumTest.
        :rtype: int
        """
        return self._enum_integer

    @enum_integer.setter
    def enum_integer(self, enum_integer: int):
        """Sets the enum_integer of this EnumTest.


        :param enum_integer: The enum_integer of this EnumTest.
        :type enum_integer: int
        """
        allowed_values = ["1", "-1"]  # noqa: E501
        if enum_integer not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_integer` ({0}), must be one of {1}"
                .format(enum_integer, allowed_values)
            )

        self._enum_integer = enum_integer

    @property
    def enum_number(self) -> float:
        """Gets the enum_number of this EnumTest.


        :return: The enum_number of this EnumTest.
        :rtype: float
        """
        return self._enum_number

    @enum_number.setter
    def enum_number(self, enum_number: float):
        """Sets the enum_number of this EnumTest.


        :param enum_number: The enum_number of this EnumTest.
        :type enum_number: float
        """
        allowed_values = ["1.1", "-1.2"]  # noqa: E501
        if enum_number not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_number` ({0}), must be one of {1}"
                .format(enum_number, allowed_values)
            )

        self._enum_number = enum_number

    @property
    def outer_enum(self) -> OuterEnum:
        """Gets the outer_enum of this EnumTest.


        :return: The outer_enum of this EnumTest.
        :rtype: OuterEnum
        """
        return self._outer_enum

    @outer_enum.setter
    def outer_enum(self, outer_enum: OuterEnum):
        """Sets the outer_enum of this EnumTest.


        :param outer_enum: The outer_enum of this EnumTest.
        :type outer_enum: OuterEnum
        """

        self._outer_enum = outer_enum
